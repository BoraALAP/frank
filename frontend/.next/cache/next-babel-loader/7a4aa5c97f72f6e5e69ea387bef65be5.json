{"ast":null,"code":"import _slicedToArray from \"/Users/artticfox/Desktop/Work/frank/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/artticfox/Desktop/Work/frank/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query DEALER_QUERY($search: String) {\\n    allDealers(where: { city_contains: $search }) {\\n      postal\\n      city\\n      venue{\\n        formattedAddress\\n        googlePlaceID\\n        lat\\n        lng\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { motion } from \"framer-motion\";\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\nvar DEALER_QUERY = gql(_templateObject());\nvar containerStyle = {\n  width: '400px',\n  height: '400px'\n};\nvar center = {\n  lat: -3.745,\n  lng: -38.523\n};\nimport { compose, withProps } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap } from \"react-google-maps\";\n\nvar DealerFinder = function DealerFinder(props) {\n  _s();\n\n  var _useLazyQuery = useLazyQuery(DEALER_QUERY),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getDealer = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      data = _useLazyQuery2$.data,\n      loading = _useLazyQuery2$.loading,\n      error = _useLazyQuery2$.error;\n\n  var _useState = useState([]),\n      locations = _useState[0],\n      setLocations = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      searchWord = _useState2[0],\n      setSearchWord = _useState2[1]; //select Input\n\n\n  var input = document.getElementById('pac-input'); //initilize searchbox\n\n  var searchBox;\n  useEffect(function () {\n    //call db\n    getDealer(); //load searchbox from google\n  }, []);\n  useEffect(function () {\n    //update state with new db after search\n    setLocations(data);\n  }, [searchWord]); // search the word in db\n\n  var handleRefetch = function handleRefetch() {\n    getDealer({\n      variables: {\n        search: searchWord\n      }\n    });\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 23\n  }, _this);\n  if (error) return \"Error! \".concat(error);\n\n  var handleChange = function handleChange(e) {\n    setSearchWord(e.target.value);\n  };\n\n  var MapWithASearchBox = compose(withProps({\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\".concat(process.env.NEXT_PUBLIC_GOOGLE_MAP_API, \"&v=3.exp&libraries=geometry,drawing,places\"),\n    loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 23\n    }, _this),\n    containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }, _this),\n    mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }, _this)\n  }), withScriptjs, withGoogleMap)(function (props) {\n    return /*#__PURE__*/_jsxDEV(GoogleMap, {\n      ref: props.onMapMounted,\n      defaultZoom: 15,\n      center: props.center,\n      onBoundsChanged: props.onBoundsChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    space: true,\n    padding: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRefetch,\n        children: \"Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(MapWithASearchBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, _this);\n}; // import { GoogleMap, useLoadScript } from '@react-google-maps/api';\n// import { StandaloneSearchBox } from '@react-google-maps/api';\n// const DealerFinder = (props) => {\n//   const [getDealer, { data, loading, error}] = useLazyQuery(DEALER_QUERY)\n//   const [locations, setLocations] = useState([])\n//   const [searchWord, setSearchWord] = useState(\"\")\n//   //select Input\n//   const input = document.getElementById('pac-input');\n//   //initilize searchbox\n//   let searchBox\n//   useEffect(() => {\n//     //call db\n//     getDealer()\n//     //load searchbox from google\n//     if(isLoaded) {\n//       searchBox = new google.maps.places.SearchBox(input); \n//     }\n//   }, [])\n//   useEffect(() => {\n//     //update state with new db after search\n//     setLocations(data)\n//   }, [searchWord])\n//   // search the word in db\n//   const handleRefetch = () => {\n//     getDealer({variables: { search: searchWord }})\n//   }\n//   //load google map and initilize\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API,\n//     libraries:[\"places\"]\n//   })\n//   if (loading) return <Loading />;\n//   if (error) return `Error! ${error}`;\n//   if (loadError) {\n//     return <div>Map cannot be loaded right now, sorry.</div>\n//   }\n//   const handleChange = (e) => {\n//     setSearchWord(e.target.value)\n//   }\n//   const onLoad = ref => searchBox = ref;\n//   const onPlacesChanged = () => {\n//     const places = searchBox.getPlaces();\n//     const bounds = new google.maps.LatLngBounds();\n//     console.log(places, bounds);\n//   }\n//   console.log(searchBox);\n//   return(\n//     <Container space padding>\n//       <div>\n//         <h1>test</h1>\n//         <button onClick={handleRefetch }>Button</button>\n//         {isLoaded ? (\n//           <><p>test</p>\n//               <GoogleMap\n//               // options={options}\n//               // onLoad={onLoad}\n//               mapContainerStyle={containerStyle}\n//           center={center}\n//           zoom={10}\n//             >\n//              <StandaloneSearchBox\n//              onLoad={onLoad}\n//              onPlacesChanged={\n//                onPlacesChanged\n//              }>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Customized your placeholder\"\n//         id=\"pac-input\"\n//         style={{\n//           boxSizing: `border-box`,\n//           border: `1px solid transparent`,\n//           width: `240px`,\n//           height: `32px`,\n//           padding: `0 12px`,\n//           borderRadius: `3px`,\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n//           fontSize: `14px`,\n//           outline: `none`,\n//           textOverflow: `ellipses`,\n//           position: \"absolute\",\n//           left: \"50%\",\n//           marginLeft: \"-120px\"\n//         }}\n//         onChange={handleChange}\n//         value={searchWord}\n//       />\n//     </StandaloneSearchBox>\n//             </GoogleMap></>\n//          ) : <Loading /> }\n//       </div>\n//     </Container>\n//   )\n// }\n//   const [locations, setLocations] = useState(data);\n//   const [categories, setCategories] = useState(undefined);\n//   const [center, setCenter] = useState({});\n//   const [activeLocation, setActiveLocation] = useState(undefined);\n//   const [search, setSearch] = useState(\"\");\n//   const [zoom, setZoom] = useState(10);\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       if (position) {\n//         setCenter({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       } else {\n//         setCenter({\n//           lat: 43.6539697,\n//           lng: -79.4338794,\n//         });\n//       }\n//     });\n//   }, []);\n//   useEffect(() => {\n//     if (!loading) {\n//       setLocations(data.allDealers);\n//       setCategories(\n//         data?.dealersConnection?.edges\n//           .map(({ node }) => node.city)\n//           .filter((value, index, self) => self.indexOf(value) === index)\n//           .sort()\n//       );\n//     }\n//   }, [data]);\n//   const containerStyle = {\n//     width: \"100%\",\n//     height: \"90vh\",\n//     maxHeight: \"50vh\",\n//   };\n//   const mapOptions = {\n//     imagePath:\n//       \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n//   };\n//   const HandleSetup = (loc, index) => {\n//     // setInfo({ ...loc, index });\n//     setActiveLocation(index);\n//     setCenter({ lat: loc.lat, lng: loc.lng });\n//     setZoom(16);\n//   };\n//   useEffect(() => {\n//     fetchMore({\n//       query: DEALER_QUERY,\n//       variables: {\n//         search,\n//       },\n//       updateQuery: (previousResult, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) {\n//           return previousResult;\n//         }\n//         console.log(previousResult, fetchMoreResult);\n//         setCategories(\n//           fetchMoreResult.dealersConnection.edges\n//             .map(({ node }) => node.city)\n//             .filter((value, index, self) => self.indexOf(value) === index)\n//             .sort()\n//         );\n//         setLocations(fetchMoreResult.dealersConnection.edges);\n//       },\n//     });\n//   }, [search]);\n//   const dealer = (loc) => (\n//     <>\n//       <h5>{loc.dealer}</h5>\n//       <InRow>\n//         <h6>Address:</h6>{\" \"}\n//         <span>\n//           {loc.address} {loc.postal} {loc.city} {loc.province}\n//         </span>\n//       </InRow>\n//       {/* <InRow>\n//   //       <h6>Contact Person:</h6> <span>{loc.person}</span>\n//   //     </InRow>\n//   //     <InRow>\n//   //       <h6>Email:</h6>{\" \"}\n//   //       <a href={`mailto:${loc.email}`}>\n//   //         <span>{loc.email}</span>\n//   //       </a>\n//   //     </InRow>\n//   //     {loc.phone && (\n//   //       <InRow>\n//   //         <h6>Phone:</h6>{\" \"}\n//   //         <a href={`tel:${loc.phone}`}>\n//   //           <span>{loc.phone}</span>\n//   //         </a>\n//   //       </InRow>\n//   //     )} */}\n//     </>\n//   );\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.REACT_APP_MAP_API_KEY,\n//     libraries: [\"places\"], // ,\n//     // ...otherOptions\n//   });\n//   const opacity = {\n//     initial: { x: -10, opacity: 0 },\n//     animate: { x: 0, opacity: 1 },\n//     exit: { x: 10, opacity: 0 },\n//   };\n//   if (!center.lat || categories === undefined || !isLoaded) {\n//     return <AnimatePresence exitBeforeEnter><LoadingS initial=\"initial\"\n//     animate=\"animate\"\n//     exit=\"exit\"\n//     variants={opacity} /></AnimatePresence>;\n//   }\n//   console.log(locations);\n//   return (\n//     <AnimatePresence exitBeforeEnter>\n//     <Container>\n//       <Left  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Content>\n//           {categories !== undefined && categories.length > 0 ? (\n//             categories.map((item, index) => {\n//               return (\n//                 <City key={index}>\n//                   <h4>{item}</h4>\n//                   {locations.map(({ node }) => {\n//                     if (node.city === item) {\n//                       return (\n//                         <Dealer\n//                           key={node.id}\n//                           active={activeLocation === node.id}\n//                           onClick={() => {\n//                             setCenter({\n//                               lat: node.lat,\n//                               lng: node.lng,\n//                             });\n//                             HandleSetup(node, node.id);\n//                             window.scrollTo(0, 0);\n//                           }}\n//                         >\n//                           {dealer(node)}\n//                         </Dealer>\n//                       );\n//                     }\n//                   })}\n//                 </City>\n//               );\n//             })\n//           ) : (\n//             <h3>There is no city with those letters</h3>\n//           )}\n//         </Content>\n//       </Left>\n//       <Right  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Fixed>\n//           <H2>\n//             Ostaco Windows and Doors products are proudly distributed by many\n//             retailers across Ontario. Please fill out this form and our team\n//             will quickly get back to you with information on your nearest\n//             dealer.\n//           </H2>\n//           <Form>\n//             <InputS\n//               type=\"search\"\n//               name=\"search\"\n//               placeholder=\"Which city are you looking for?\"\n//               value={search}\n//               onChange={(e) => setSearch(e.target.value)}\n//             />\n//           </Form>\n//           {center.lat && (\n//             <GoogleMap\n//               center={center}\n//               mapContainerStyle={containerStyle}\n//               zoom={zoom}\n//             >\n//               <MarkerClusterer options={mapOptions} averageCenter={true}>\n//                 {(clusterer) =>\n//                   locations.map(({ node }) => (\n//                     <MarkerS\n//                       key={node.id}\n//                       position={node}\n//                       clusterer={clusterer}\n//                       title={node.name}\n//                       active={activeLocation === node.id}\n//                       onClick={() => HandleSetup(node, node.id)}\n//                     />\n//                   ))\n//                 }\n//               </MarkerClusterer>\n//               {(activeLocation && locations) &&\n//                 locations.map(({ node }) => {\n//                   return (\n//                     node.id === activeLocation && (\n//                       <InfoWindow\n//                         onCloseClick={() => setActiveLocation(undefined)}\n//                         position={{ lat: node.lat, lng: node.lng }}\n//                         key={node.id}\n//                       >\n//                         <>\n//                           <h5>{node.dealer}</h5>\n//                           <InRow>\n//                             <h6>Address:</h6>\n//                             <span>\n//                               {node.address} {node.postal} {node.city}{\" \"}\n//                               {node.province}\n//                             </span>\n//                           </InRow>\n//                         </>\n//                       </InfoWindow>\n//                     )\n//                   );\n//                 })}\n//             </GoogleMap>\n//           )}\n//         </Fixed>\n//       </Right>\n//     </Container>\n//     </AnimatePresence>\n//   );\n// const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\n\n_s(DealerFinder, \"e8ptI807IilJfwB8VQqewtOHnfw=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = DealerFinder;\nvar LoadingS = motion.custom(styled(Loading).withConfig({\n  displayName: \"dealerfinder__LoadingS\",\n  componentId: \"sc-1ixs21k-0\"\n})([\"\"]));\nvar Left = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Left\",\n  componentId: \"sc-1ixs21k-1\"\n})([\"display:grid;grid-row:2;@media (min-width:768px){grid-row:1;}\"]);\nvar Right = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Right\",\n  componentId: \"sc-1ixs21k-2\"\n})([\"display:grid;@media (min-width:768px){position:relative;}\"]);\nvar H2 = styled.h2.withConfig({\n  displayName: \"dealerfinder__H2\",\n  componentId: \"sc-1ixs21k-3\"\n})([\"font-size:0.875rem;font-weight:400;max-width:450px;\"]);\nvar Fixed = styled.div.withConfig({\n  displayName: \"dealerfinder__Fixed\",\n  componentId: \"sc-1ixs21k-4\"\n})([\"display:grid;grid-gap:2vh;@media (min-width:768px){position:fixed;width:52.5vw;}\"]);\nvar InputS = styled.input.withConfig({\n  displayName: \"dealerfinder__InputS\",\n  componentId: \"sc-1ixs21k-5\"\n})([\"max-width:450px;\"]);\nvar Content = styled.ul.withConfig({\n  displayName: \"dealerfinder__Content\",\n  componentId: \"sc-1ixs21k-6\"\n})([\"list-style:none;padding-inline-start:0px;display:grid;grid-gap:1.5em;h4{margin:16px 0 0;}\"]);\nvar Dealer = styled.div.withConfig({\n  displayName: \"dealerfinder__Dealer\",\n  componentId: \"sc-1ixs21k-7\"\n})([\"display:grid;grid-gap:0.5em;h6{margin:0;}\"]); // const MarkerS = styled(Marker)`\n//   transform: scale(1.1);\n// `;\n\nvar InRow = styled.div.withConfig({\n  displayName: \"dealerfinder__InRow\",\n  componentId: \"sc-1ixs21k-8\"\n})([\"display:grid;grid-auto-flow:column;justify-content:start;align-items:baseline;grid-gap:1em;\"]);\nvar City = styled.div.withConfig({\n  displayName: \"dealerfinder__City\",\n  componentId: \"sc-1ixs21k-9\"\n})([\"h4{grid-column:1/-1;}display:grid;grid-gap:1em;\"]);\nvar Form = styled.form.withConfig({\n  displayName: \"dealerfinder__Form\",\n  componentId: \"sc-1ixs21k-10\"\n})([\"display:grid;\"]);\nexport default DealerFinder;\n\nvar _c;\n\n$RefreshReg$(_c, \"DealerFinder\");","map":{"version":3,"sources":["/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx"],"names":["useState","useEffect","styled","gql","useLazyQuery","motion","Loading","Container","DEALER_QUERY","containerStyle","width","height","center","lat","lng","compose","withProps","withScriptjs","withGoogleMap","GoogleMap","DealerFinder","props","getDealer","data","loading","error","locations","setLocations","searchWord","setSearchWord","input","document","getElementById","searchBox","handleRefetch","variables","search","handleChange","e","target","value","MapWithASearchBox","googleMapURL","process","env","NEXT_PUBLIC_GOOGLE_MAP_API","loadingElement","containerElement","mapElement","onMapMounted","onBoundsChanged","LoadingS","custom","Left","div","Right","H2","h2","Fixed","InputS","Content","ul","Dealer","InRow","City","Form","form"],"mappings":"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AAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AASD,CA3FD,C,CA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAncMd,Y;UACyChB,Y;;;KADzCgB,Y;AAqcN,IAAM+B,QAAQ,GAAG9C,MAAM,CAAC+C,MAAP,CAAclD,MAAM,CAACI,OAAD,CAApB;AAAA;AAAA;AAAA,SAAjB;AAGA,IAAM+C,IAAI,GAAGnD,MAAM,CAACG,MAAM,CAACiD,GAAR,CAAT;AAAA;AAAA;AAAA,qEAAV;AAQA,IAAMC,KAAK,GAAGrD,MAAM,CAACG,MAAM,CAACiD,GAAR,CAAT;AAAA;AAAA;AAAA,iEAAX;AAOA,IAAME,EAAE,GAAGtD,MAAM,CAACuD,EAAV;AAAA;AAAA;AAAA,2DAAR;AAMA,IAAMC,KAAK,GAAGxD,MAAM,CAACoD,GAAV;AAAA;AAAA;AAAA,wFAAX;AASA,IAAMK,MAAM,GAAGzD,MAAM,CAAC4B,KAAV;AAAA;AAAA;AAAA,wBAAZ;AAIA,IAAM8B,OAAO,GAAG1D,MAAM,CAAC2D,EAAV;AAAA;AAAA;AAAA,iGAAb;AAUA,IAAMC,MAAM,GAAG5D,MAAM,CAACoD,GAAV;AAAA;AAAA;AAAA,iDAAZ,C,CAQA;AACA;AACA;;AAEA,IAAMS,KAAK,GAAG7D,MAAM,CAACoD,GAAV;AAAA;AAAA;AAAA,mGAAX;AAQA,IAAMU,IAAI,GAAG9D,MAAM,CAACoD,GAAV;AAAA;AAAA;AAAA,uDAAV;AAQA,IAAMW,IAAI,GAAG/D,MAAM,CAACgE,IAAV;AAAA;AAAA;AAAA,qBAAV;AAIA,eAAe9C,YAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\n\nconst DEALER_QUERY = gql`\n  query DEALER_QUERY($search: String) {\n    allDealers(where: { city_contains: $search }) {\n      postal\n      city\n      venue{\n        formattedAddress\n        googlePlaceID\n        lat\n        lng\n      }\n    }\n  }\n`;\n\nconst containerStyle = {\n  width: '400px',\n  height: '400px'\n};\n\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nimport _ from 'lodash';\nimport { compose, withProps, lifecycle } from\"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from\"react-google-maps\";\nimport SearchBox from\"react-google-maps/lib/components/places/SearchBox\";\n\nconst DealerFinder = (props) => {\n  const [getDealer, { data, loading, error}] = useLazyQuery(DEALER_QUERY)\n  const [locations, setLocations] = useState([])\n  const [searchWord, setSearchWord] = useState(\"\")\n  //select Input\n  const input = document.getElementById('pac-input');\n  //initilize searchbox\n  let searchBox\n\n  useEffect(() => {\n    //call db\n    getDealer()\n    //load searchbox from google\n  }, [])\n\n  useEffect(() => {\n    //update state with new db after search\n    setLocations(data)\n  }, [searchWord])\n\n  // search the word in db\n  const handleRefetch = () => {\n    getDealer({variables: { search: searchWord }})\n  }\n\n\n\n  if (loading) return <Loading />;\n  if (error) return `Error! ${error}`;\n  \n\n  const handleChange = (e) => {\n    setSearchWord(e.target.value)\n  }\n\n\n  const MapWithASearchBox = compose(\n    withProps({\n      googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAP_API}&v=3.exp&libraries=geometry,drawing,places`,\n      loadingElement: <div style={{ height: `100%` }} />,\n      containerElement: <div style={{ height: `400px` }} />,\n      mapElement: <div style={{ height: `100%` }} />,\n    }),\n    withScriptjs,\n    withGoogleMap\n  )(props =>\n    <GoogleMap\n      ref={props.onMapMounted}\n      defaultZoom={15}\n      center={props.center}\n      onBoundsChanged={props.onBoundsChanged}\n    >\n      {/* <SearchBox\n        // ref={props.onSearchBoxMounted}\n        // bounds={props.bounds}\n        // onPlacesChanged={props.onPlacesChanged}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Customized your placeholder\"\n          style={{\n            boxSizing: `border-box`,\n            border: `1px solid transparent`,\n            width: `240px`,\n            height: `32px`,\n            marginTop: `27px`,\n            padding: `0 12px`,\n            borderRadius: `3px`,\n            boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n            fontSize: `14px`,\n            outline: `none`,\n            textOverflow: `ellipses`,\n          }}\n        />\n      </SearchBox> */}\n      {/* {props.markers.map((marker, index) =>\n        <Marker key={index} position={marker.position} />\n      )} */}\n    </GoogleMap>\n  );\n\n\n  return(\n    <Container space padding>\n      <div>\n        <h1>test</h1>\n        <button onClick={handleRefetch }>Button</button>\n        <MapWithASearchBox />\n      </div>\n    </Container>\n  )\n}\n\n// import { GoogleMap, useLoadScript } from '@react-google-maps/api';\n// import { StandaloneSearchBox } from '@react-google-maps/api';\n// const DealerFinder = (props) => {\n//   const [getDealer, { data, loading, error}] = useLazyQuery(DEALER_QUERY)\n//   const [locations, setLocations] = useState([])\n//   const [searchWord, setSearchWord] = useState(\"\")\n//   //select Input\n//   const input = document.getElementById('pac-input');\n//   //initilize searchbox\n//   let searchBox\n\n//   useEffect(() => {\n//     //call db\n//     getDealer()\n//     //load searchbox from google\n//     if(isLoaded) {\n//       searchBox = new google.maps.places.SearchBox(input); \n//     }\n//   }, [])\n\n//   useEffect(() => {\n//     //update state with new db after search\n//     setLocations(data)\n//   }, [searchWord])\n\n//   // search the word in db\n//   const handleRefetch = () => {\n//     getDealer({variables: { search: searchWord }})\n//   }\n\n//   //load google map and initilize\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API,\n//     libraries:[\"places\"]\n//   })\n\n//   if (loading) return <Loading />;\n//   if (error) return `Error! ${error}`;\n    \n//   if (loadError) {\n//     return <div>Map cannot be loaded right now, sorry.</div>\n//   }\n\n//   const handleChange = (e) => {\n//     setSearchWord(e.target.value)\n//   }\n\n//   const onLoad = ref => searchBox = ref;\n//   const onPlacesChanged = () => {\n//     const places = searchBox.getPlaces();\n//     const bounds = new google.maps.LatLngBounds();\n//     console.log(places, bounds);\n//   }\n\n//   console.log(searchBox);\n\n\n//   return(\n//     <Container space padding>\n//       <div>\n//         <h1>test</h1>\n//         <button onClick={handleRefetch }>Button</button>\n//         {isLoaded ? (\n//           <><p>test</p>\n//               <GoogleMap\n//               // options={options}\n//               // onLoad={onLoad}\n//               mapContainerStyle={containerStyle}\n//           center={center}\n//           zoom={10}\n//             >\n//              <StandaloneSearchBox\n//              onLoad={onLoad}\n//              onPlacesChanged={\n//                onPlacesChanged\n//              }>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Customized your placeholder\"\n//         id=\"pac-input\"\n//         style={{\n//           boxSizing: `border-box`,\n//           border: `1px solid transparent`,\n//           width: `240px`,\n//           height: `32px`,\n//           padding: `0 12px`,\n//           borderRadius: `3px`,\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n//           fontSize: `14px`,\n//           outline: `none`,\n//           textOverflow: `ellipses`,\n//           position: \"absolute\",\n//           left: \"50%\",\n//           marginLeft: \"-120px\"\n//         }}\n//         onChange={handleChange}\n//         value={searchWord}\n      \n//       />\n//     </StandaloneSearchBox>\n//             </GoogleMap></>\n//          ) : <Loading /> }\n//       </div>\n//     </Container>\n//   )\n// }\n\n//   const [locations, setLocations] = useState(data);\n//   const [categories, setCategories] = useState(undefined);\n//   const [center, setCenter] = useState({});\n//   const [activeLocation, setActiveLocation] = useState(undefined);\n//   const [search, setSearch] = useState(\"\");\n//   const [zoom, setZoom] = useState(10);\n\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       if (position) {\n//         setCenter({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       } else {\n//         setCenter({\n//           lat: 43.6539697,\n//           lng: -79.4338794,\n//         });\n//       }\n//     });\n//   }, []);\n\n//   useEffect(() => {\n//     if (!loading) {\n//       setLocations(data.allDealers);\n\n//       setCategories(\n//         data?.dealersConnection?.edges\n//           .map(({ node }) => node.city)\n//           .filter((value, index, self) => self.indexOf(value) === index)\n//           .sort()\n//       );\n//     }\n//   }, [data]);\n\n//   const containerStyle = {\n//     width: \"100%\",\n//     height: \"90vh\",\n//     maxHeight: \"50vh\",\n//   };\n\n//   const mapOptions = {\n//     imagePath:\n//       \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n//   };\n\n//   const HandleSetup = (loc, index) => {\n//     // setInfo({ ...loc, index });\n//     setActiveLocation(index);\n//     setCenter({ lat: loc.lat, lng: loc.lng });\n//     setZoom(16);\n//   };\n\n//   useEffect(() => {\n//     fetchMore({\n//       query: DEALER_QUERY,\n//       variables: {\n//         search,\n//       },\n//       updateQuery: (previousResult, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) {\n//           return previousResult;\n//         }\n\n//         console.log(previousResult, fetchMoreResult);\n\n//         setCategories(\n//           fetchMoreResult.dealersConnection.edges\n//             .map(({ node }) => node.city)\n//             .filter((value, index, self) => self.indexOf(value) === index)\n//             .sort()\n//         );\n//         setLocations(fetchMoreResult.dealersConnection.edges);\n//       },\n//     });\n//   }, [search]);\n\n//   const dealer = (loc) => (\n//     <>\n//       <h5>{loc.dealer}</h5>\n//       <InRow>\n//         <h6>Address:</h6>{\" \"}\n//         <span>\n//           {loc.address} {loc.postal} {loc.city} {loc.province}\n//         </span>\n//       </InRow>\n\n//       {/* <InRow>\n//   //       <h6>Contact Person:</h6> <span>{loc.person}</span>\n//   //     </InRow>\n//   //     <InRow>\n//   //       <h6>Email:</h6>{\" \"}\n//   //       <a href={`mailto:${loc.email}`}>\n//   //         <span>{loc.email}</span>\n//   //       </a>\n//   //     </InRow>\n//   //     {loc.phone && (\n//   //       <InRow>\n//   //         <h6>Phone:</h6>{\" \"}\n//   //         <a href={`tel:${loc.phone}`}>\n//   //           <span>{loc.phone}</span>\n//   //         </a>\n//   //       </InRow>\n//   //     )} */}\n//     </>\n//   );\n\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.REACT_APP_MAP_API_KEY,\n//     libraries: [\"places\"], // ,\n//     // ...otherOptions\n//   });\n\n//   const opacity = {\n//     initial: { x: -10, opacity: 0 },\n//     animate: { x: 0, opacity: 1 },\n//     exit: { x: 10, opacity: 0 },\n//   };\n\n//   if (!center.lat || categories === undefined || !isLoaded) {\n//     return <AnimatePresence exitBeforeEnter><LoadingS initial=\"initial\"\n//     animate=\"animate\"\n//     exit=\"exit\"\n//     variants={opacity} /></AnimatePresence>;\n//   }\n\n//   console.log(locations);\n  \n  \n//   return (\n//     <AnimatePresence exitBeforeEnter>\n      \n//     <Container>\n//       <Left  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Content>\n//           {categories !== undefined && categories.length > 0 ? (\n//             categories.map((item, index) => {\n//               return (\n//                 <City key={index}>\n//                   <h4>{item}</h4>\n//                   {locations.map(({ node }) => {\n//                     if (node.city === item) {\n//                       return (\n//                         <Dealer\n//                           key={node.id}\n//                           active={activeLocation === node.id}\n//                           onClick={() => {\n//                             setCenter({\n//                               lat: node.lat,\n//                               lng: node.lng,\n//                             });\n//                             HandleSetup(node, node.id);\n//                             window.scrollTo(0, 0);\n//                           }}\n//                         >\n//                           {dealer(node)}\n//                         </Dealer>\n//                       );\n//                     }\n//                   })}\n//                 </City>\n//               );\n//             })\n//           ) : (\n//             <h3>There is no city with those letters</h3>\n//           )}\n//         </Content>\n//       </Left>\n//       <Right  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Fixed>\n//           <H2>\n//             Ostaco Windows and Doors products are proudly distributed by many\n//             retailers across Ontario. Please fill out this form and our team\n//             will quickly get back to you with information on your nearest\n//             dealer.\n//           </H2>\n//           <Form>\n//             <InputS\n//               type=\"search\"\n//               name=\"search\"\n//               placeholder=\"Which city are you looking for?\"\n//               value={search}\n//               onChange={(e) => setSearch(e.target.value)}\n//             />\n//           </Form>\n//           {center.lat && (\n//             <GoogleMap\n//               center={center}\n//               mapContainerStyle={containerStyle}\n//               zoom={zoom}\n//             >\n//               <MarkerClusterer options={mapOptions} averageCenter={true}>\n//                 {(clusterer) =>\n//                   locations.map(({ node }) => (\n//                     <MarkerS\n//                       key={node.id}\n//                       position={node}\n//                       clusterer={clusterer}\n//                       title={node.name}\n//                       active={activeLocation === node.id}\n//                       onClick={() => HandleSetup(node, node.id)}\n//                     />\n//                   ))\n//                 }\n//               </MarkerClusterer>\n\n//               {(activeLocation && locations) &&\n//                 locations.map(({ node }) => {\n//                   return (\n//                     node.id === activeLocation && (\n//                       <InfoWindow\n//                         onCloseClick={() => setActiveLocation(undefined)}\n//                         position={{ lat: node.lat, lng: node.lng }}\n//                         key={node.id}\n//                       >\n//                         <>\n//                           <h5>{node.dealer}</h5>\n\n//                           <InRow>\n//                             <h6>Address:</h6>\n//                             <span>\n//                               {node.address} {node.postal} {node.city}{\" \"}\n//                               {node.province}\n//                             </span>\n//                           </InRow>\n//                         </>\n//                       </InfoWindow>\n//                     )\n//                   );\n//                 })}\n//             </GoogleMap>\n//           )}\n//         </Fixed>\n//       </Right>\n//     </Container>\n//     </AnimatePresence>\n//   );\n\n// const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\nconst LoadingS = motion.custom(styled(Loading)``)\n\n\nconst Left = styled(motion.div)`\n  display: grid;\n  grid-row: 2;\n  @media (min-width: 768px) {\n    grid-row: 1;\n  }\n`;\n\nconst Right = styled(motion.div)`\n  display: grid;\n  @media (min-width: 768px) {\n    position: relative;\n  }\n`;\n\nconst H2 = styled.h2`\n  font-size: 0.875rem;\n  font-weight: 400;\n  max-width: 450px;\n`;\n\nconst Fixed = styled.div`\n  display: grid;\n  grid-gap: 2vh;\n  @media (min-width: 768px) {\n    position: fixed;\n    width: 52.5vw;\n  }\n`;\n\nconst InputS = styled.input`\n  max-width: 450px;\n`;\n\nconst Content = styled.ul`\n  list-style: none;\n  padding-inline-start: 0px;\n  display: grid;\n  grid-gap: 1.5em;\n  h4 {\n    margin: 16px 0 0;\n  }\n`;\n\nconst Dealer = styled.div`\n  display: grid;\n  grid-gap: 0.5em;\n  h6 {\n    margin: 0;\n  }\n`;\n\n// const MarkerS = styled(Marker)`\n//   transform: scale(1.1);\n// `;\n\nconst InRow = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  justify-content: start;\n  align-items: baseline;\n  grid-gap: 1em;\n`;\n\nconst City = styled.div`\n  h4 {\n    grid-column: 1/-1;\n  }\n  display: grid;\n  grid-gap: 1em;\n`;\n\nconst Form = styled.form`\n  display: grid;\n`;\n\nexport default DealerFinder;\n"]},"metadata":{},"sourceType":"module"}