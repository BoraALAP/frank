{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/artticfox/Desktop/Work/frank/frontend/components/layout/Body.tsx\",\n    _this = this;\n\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nvar Body = function Body(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: children.isArray ? children.map(function (parag, index) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: parag\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 42\n      }, _this);\n    }) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Body;\nvar Container = styled.div.withConfig({\n  displayName: \"Body__Container\",\n  componentId: \"sc-7jnva9-0\"\n})([\"display:grid;gap:calc(\", \" / 2);\"], function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.gap;\n});\n_c2 = Container;\nexport default Body;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Body\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["/Users/artticfox/Desktop/Work/frank/frontend/components/layout/Body.tsx"],"names":["React","styled","Body","children","isArray","map","parag","index","Container","div","theme","gap"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC7B,sBACE,QAAC,SAAD;AAAA,cACGA,QAAQ,CAACC,OAAT,GACGD,QAAQ,CAACE,GAAT,CAAa,UAACC,KAAD,EAAQC,KAAR;AAAA,0BAAkB;AAAA,kBAAgBD;AAAhB,SAAQC,KAAR;AAAA;AAAA;AAAA;AAAA,eAAlB;AAAA,KAAb,CADH,GAEGJ;AAHN;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CARD;;KAAMD,I;AAUN,IAAMM,SAAS,GAAGP,MAAM,CAACQ,GAAV;AAAA;AAAA;AAAA,yCAED;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,GAArB;AAAA,CAFC,CAAf;MAAMH,S;AAKN,eAAeN,IAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Body = ({ children }) => {\n  return (\n    <Container>\n      {children.isArray\n        ? children.map((parag, index) => <p key={index}>{parag}</p>)\n        : children}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: grid;\n  gap: calc(${({ theme }) => theme.gap} / 2);\n`;\n\nexport default Body;\n"]},"metadata":{},"sourceType":"module"}