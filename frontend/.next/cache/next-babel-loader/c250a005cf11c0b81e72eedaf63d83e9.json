{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { motion } from \"framer-motion\";\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\nconst DEALER_QUERY = gql`\n  query DEALER_QUERY($search: String) {\n    allDealers(where: { city_contains: $search }) {\n      postal\n      city\n      venue{\n        formattedAddress\n        googlePlaceID\n        lat\n        lng\n      }\n    }\n  }\n`;\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\nconst DealerFinder = props => {\n  const [getDealer, {\n    data,\n    loading,\n    error\n  }] = useLazyQuery(DEALER_QUERY);\n  const {\n    0: locations,\n    1: setLocations\n  } = useState([]);\n  const {\n    0: searchWord,\n    1: setSearchWord\n  } = useState(\"\");\n  const {\n    0: location,\n    1: setLocation\n  } = useState({\n    lat: -3.745,\n    lng: -38.523\n  });\n  useEffect(() => {\n    //call db\n    getDealer();\n    setLocations(data);\n  }, []);\n  useEffect(() => {\n    //update state with new db after search\n    !loading && setLocations(data);\n  }); // search the word in db\n\n  const handleRefetch = () => {\n    getDealer({\n      variables: {\n        search: searchWord\n      }\n    });\n  }; //load google map and initilize\n\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 23\n  }, this);\n  if (error) return `Error! ${error}`;\n\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Map cannot be loaded right now, sorry.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n\n  const handleChange = e => {\n    setSearchWord(e.target.value);\n  };\n\n  console.log(locations);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    space: true,\n    padding: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRefetch,\n        children: \"Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), isLoaded && !loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerStyle: containerStyle,\n          center: location,\n          zoom: 10\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), !loading && locations && locations.length > 0 && locations.map(item => console.log(item))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}; // const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\n\nconst LoadingS = motion.custom(styled(Loading).withConfig({\n  displayName: \"dealerfinder__LoadingS\",\n  componentId: \"sc-1ixs21k-0\"\n})([\"\"]));\nconst Left = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Left\",\n  componentId: \"sc-1ixs21k-1\"\n})([\"display:grid;grid-row:2;@media (min-width:768px){grid-row:1;}\"]);\nconst Right = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Right\",\n  componentId: \"sc-1ixs21k-2\"\n})([\"display:grid;@media (min-width:768px){position:relative;}\"]);\nconst H2 = styled.h2.withConfig({\n  displayName: \"dealerfinder__H2\",\n  componentId: \"sc-1ixs21k-3\"\n})([\"font-size:0.875rem;font-weight:400;max-width:450px;\"]);\nconst Fixed = styled.div.withConfig({\n  displayName: \"dealerfinder__Fixed\",\n  componentId: \"sc-1ixs21k-4\"\n})([\"display:grid;grid-gap:2vh;@media (min-width:768px){position:fixed;width:52.5vw;}\"]);\nconst InputS = styled.input.withConfig({\n  displayName: \"dealerfinder__InputS\",\n  componentId: \"sc-1ixs21k-5\"\n})([\"max-width:450px;\"]);\nconst Content = styled.ul.withConfig({\n  displayName: \"dealerfinder__Content\",\n  componentId: \"sc-1ixs21k-6\"\n})([\"list-style:none;padding-inline-start:0px;display:grid;grid-gap:1.5em;h4{margin:16px 0 0;}\"]);\nconst Dealer = styled.div.withConfig({\n  displayName: \"dealerfinder__Dealer\",\n  componentId: \"sc-1ixs21k-7\"\n})([\"display:grid;grid-gap:0.5em;h6{margin:0;}\"]); // const MarkerS = styled(Marker)`\n//   transform: scale(1.1);\n// `;\n\nconst InRow = styled.div.withConfig({\n  displayName: \"dealerfinder__InRow\",\n  componentId: \"sc-1ixs21k-8\"\n})([\"display:grid;grid-auto-flow:column;justify-content:start;align-items:baseline;grid-gap:1em;\"]);\nconst City = styled.div.withConfig({\n  displayName: \"dealerfinder__City\",\n  componentId: \"sc-1ixs21k-9\"\n})([\"h4{grid-column:1/-1;}display:grid;grid-gap:1em;\"]);\nconst Form = styled.form.withConfig({\n  displayName: \"dealerfinder__Form\",\n  componentId: \"sc-1ixs21k-10\"\n})([\"display:grid;\"]);\nexport default DealerFinder;","map":{"version":3,"sources":["/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx"],"names":["useState","useEffect","styled","gql","useLazyQuery","motion","GoogleMap","useLoadScript","Loading","Container","DEALER_QUERY","containerStyle","width","height","DealerFinder","props","getDealer","data","loading","error","locations","setLocations","searchWord","setSearchWord","location","setLocation","lat","lng","handleRefetch","variables","search","isLoaded","loadError","googleMapsApiKey","process","env","NEXT_PUBLIC_GOOGLE_MAP_API","handleChange","e","target","value","console","log","length","map","item","LoadingS","custom","Left","div","Right","H2","h2","Fixed","InputS","input","Content","ul","Dealer","InRow","City","Form","form"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\n\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\n\nconst DEALER_QUERY = gql`\n  query DEALER_QUERY($search: String) {\n    allDealers(where: { city_contains: $search }) {\n      postal\n      city\n      venue{\n        formattedAddress\n        googlePlaceID\n        lat\n        lng\n      }\n    }\n  }\n`;\n\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\n\n\nconst DealerFinder = (props) => {\n  const [getDealer, { data, loading, error}] = useLazyQuery(DEALER_QUERY)\n  const [locations, setLocations] = useState([])\n  const [searchWord, setSearchWord] = useState(\"\")\n  const [location, setLocation] = useState({lat: -3.745,\n    lng: -38.523})\n\n  useEffect(() => {\n    //call db\n    getDealer()\n    setLocations(data)\n  }, [])\n\n  useEffect(() => {\n    //update state with new db after search\n    !loading && setLocations(data)\n  })\n\n  // search the word in db\n  const handleRefetch = () => {\n    getDealer({variables: { search: searchWord }})\n  }\n\n  //load google map and initilize\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API,\n  })\n\n  if (loading) return <Loading />;\n  if (error) return `Error! ${error}`;\n    \n  if (loadError) {\n    return <div>Map cannot be loaded right now, sorry.</div>\n  }\n\n  const handleChange = (e) => {\n    setSearchWord(e.target.value)\n  }\n\nconsole.log(locations);\n\n  return(\n    <Container space padding>\n      <div>\n        <h1>test</h1>\n        <button onClick={handleRefetch }>Button</button>\n        {(isLoaded && !loading) ? (\n          <>\n            <p>test</p>\n            <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={location}\n            zoom={10}\n            >\n              \n            </GoogleMap>\n          </>\n        ) : <Loading /> }\n        {(!loading && locations && locations.length > 0) && locations.map(item => console.log(item))}\n      </div>\n    </Container>\n  )\n}\n\n\n// const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\nconst LoadingS = motion.custom(styled(Loading)``)\n\n\nconst Left = styled(motion.div)`\n  display: grid;\n  grid-row: 2;\n  @media (min-width: 768px) {\n    grid-row: 1;\n  }\n`;\n\nconst Right = styled(motion.div)`\n  display: grid;\n  @media (min-width: 768px) {\n    position: relative;\n  }\n`;\n\nconst H2 = styled.h2`\n  font-size: 0.875rem;\n  font-weight: 400;\n  max-width: 450px;\n`;\n\nconst Fixed = styled.div`\n  display: grid;\n  grid-gap: 2vh;\n  @media (min-width: 768px) {\n    position: fixed;\n    width: 52.5vw;\n  }\n`;\n\nconst InputS = styled.input`\n  max-width: 450px;\n`;\n\nconst Content = styled.ul`\n  list-style: none;\n  padding-inline-start: 0px;\n  display: grid;\n  grid-gap: 1.5em;\n  h4 {\n    margin: 16px 0 0;\n  }\n`;\n\nconst Dealer = styled.div`\n  display: grid;\n  grid-gap: 0.5em;\n  h6 {\n    margin: 0;\n  }\n`;\n\n// const MarkerS = styled(Marker)`\n//   transform: scale(1.1);\n// `;\n\nconst InRow = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  justify-content: start;\n  align-items: baseline;\n  grid-gap: 1em;\n`;\n\nconst City = styled.div`\n  h4 {\n    grid-column: 1/-1;\n  }\n  display: grid;\n  grid-gap: 1em;\n`;\n\nconst Form = styled.form`\n  display: grid;\n`;\n\nexport default DealerFinder;\n"]},"metadata":{},"sourceType":"module"}