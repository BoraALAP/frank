{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { motion } from \"framer-motion\";\nimport { Marker } from \"react-google-maps\";\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\nconst DEALER_QUERY = gql`\n  query DEALER_QUERY($search: String) {\n    allDealers(where: { city_contains: $search }) {\n      postal\n      city\n      venue{\n        formattedAddress\n        googlePlaceID\n        lat\n        lng\n      }\n    }\n  }\n  \n`;\n\nconst DealerFinder = props => {\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(DEALER_QUERY);\n  const {\n    0: locations,\n    1: setLocations\n  } = useState([]);\n  useEffect(() => {\n    setLocations(data);\n  }, [data]);\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  console.log(locations);\n\n  const handleRefetch = () => {\n    refetch({\n      variable: {\n        search: \"Tor\"\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    space: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRefetch,\n        children: \"Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this); //   const [locations, setLocations] = useState(data);\n  //   const [categories, setCategories] = useState(undefined);\n  //   const [center, setCenter] = useState({});\n  //   const [activeLocation, setActiveLocation] = useState(undefined);\n  //   const [search, setSearch] = useState(\"\");\n  //   const [zoom, setZoom] = useState(10);\n  //   useEffect(() => {\n  //     navigator.geolocation.getCurrentPosition((position) => {\n  //       if (position) {\n  //         setCenter({\n  //           lat: position.coords.latitude,\n  //           lng: position.coords.longitude,\n  //         });\n  //       } else {\n  //         setCenter({\n  //           lat: 43.6539697,\n  //           lng: -79.4338794,\n  //         });\n  //       }\n  //     });\n  //   }, []);\n  //   useEffect(() => {\n  //     if (!loading) {\n  //       setLocations(data.allDealers);\n  //       setCategories(\n  //         data?.dealersConnection?.edges\n  //           .map(({ node }) => node.city)\n  //           .filter((value, index, self) => self.indexOf(value) === index)\n  //           .sort()\n  //       );\n  //     }\n  //   }, [data]);\n  //   const containerStyle = {\n  //     width: \"100%\",\n  //     height: \"90vh\",\n  //     maxHeight: \"50vh\",\n  //   };\n  //   const mapOptions = {\n  //     imagePath:\n  //       \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n  //   };\n  //   const HandleSetup = (loc, index) => {\n  //     // setInfo({ ...loc, index });\n  //     setActiveLocation(index);\n  //     setCenter({ lat: loc.lat, lng: loc.lng });\n  //     setZoom(16);\n  //   };\n  //   useEffect(() => {\n  //     fetchMore({\n  //       query: DEALER_QUERY,\n  //       variables: {\n  //         search,\n  //       },\n  //       updateQuery: (previousResult, { fetchMoreResult }) => {\n  //         if (!fetchMoreResult) {\n  //           return previousResult;\n  //         }\n  //         console.log(previousResult, fetchMoreResult);\n  //         setCategories(\n  //           fetchMoreResult.dealersConnection.edges\n  //             .map(({ node }) => node.city)\n  //             .filter((value, index, self) => self.indexOf(value) === index)\n  //             .sort()\n  //         );\n  //         setLocations(fetchMoreResult.dealersConnection.edges);\n  //       },\n  //     });\n  //   }, [search]);\n  //   const dealer = (loc) => (\n  //     <>\n  //       <h5>{loc.dealer}</h5>\n  //       <InRow>\n  //         <h6>Address:</h6>{\" \"}\n  //         <span>\n  //           {loc.address} {loc.postal} {loc.city} {loc.province}\n  //         </span>\n  //       </InRow>\n  //       {/* <InRow>\n  //   //       <h6>Contact Person:</h6> <span>{loc.person}</span>\n  //   //     </InRow>\n  //   //     <InRow>\n  //   //       <h6>Email:</h6>{\" \"}\n  //   //       <a href={`mailto:${loc.email}`}>\n  //   //         <span>{loc.email}</span>\n  //   //       </a>\n  //   //     </InRow>\n  //   //     {loc.phone && (\n  //   //       <InRow>\n  //   //         <h6>Phone:</h6>{\" \"}\n  //   //         <a href={`tel:${loc.phone}`}>\n  //   //           <span>{loc.phone}</span>\n  //   //         </a>\n  //   //       </InRow>\n  //   //     )} */}\n  //     </>\n  //   );\n  //   const { isLoaded, loadError } = useLoadScript({\n  //     googleMapsApiKey: process.env.REACT_APP_MAP_API_KEY,\n  //     libraries: [\"places\"], // ,\n  //     // ...otherOptions\n  //   });\n  //   const opacity = {\n  //     initial: { x: -10, opacity: 0 },\n  //     animate: { x: 0, opacity: 1 },\n  //     exit: { x: 10, opacity: 0 },\n  //   };\n  //   if (!center.lat || categories === undefined || !isLoaded) {\n  //     return <AnimatePresence exitBeforeEnter><LoadingS initial=\"initial\"\n  //     animate=\"animate\"\n  //     exit=\"exit\"\n  //     variants={opacity} /></AnimatePresence>;\n  //   }\n  //   console.log(locations);\n  //   return (\n  //     <AnimatePresence exitBeforeEnter>\n  //     <Container>\n  //       <Left  initial=\"initial\"\n  //             animate=\"animate\"\n  //             exit=\"exit\"\n  //             variants={opacity}>\n  //         <Content>\n  //           {categories !== undefined && categories.length > 0 ? (\n  //             categories.map((item, index) => {\n  //               return (\n  //                 <City key={index}>\n  //                   <h4>{item}</h4>\n  //                   {locations.map(({ node }) => {\n  //                     if (node.city === item) {\n  //                       return (\n  //                         <Dealer\n  //                           key={node.id}\n  //                           active={activeLocation === node.id}\n  //                           onClick={() => {\n  //                             setCenter({\n  //                               lat: node.lat,\n  //                               lng: node.lng,\n  //                             });\n  //                             HandleSetup(node, node.id);\n  //                             window.scrollTo(0, 0);\n  //                           }}\n  //                         >\n  //                           {dealer(node)}\n  //                         </Dealer>\n  //                       );\n  //                     }\n  //                   })}\n  //                 </City>\n  //               );\n  //             })\n  //           ) : (\n  //             <h3>There is no city with those letters</h3>\n  //           )}\n  //         </Content>\n  //       </Left>\n  //       <Right  initial=\"initial\"\n  //             animate=\"animate\"\n  //             exit=\"exit\"\n  //             variants={opacity}>\n  //         <Fixed>\n  //           <H2>\n  //             Ostaco Windows and Doors products are proudly distributed by many\n  //             retailers across Ontario. Please fill out this form and our team\n  //             will quickly get back to you with information on your nearest\n  //             dealer.\n  //           </H2>\n  //           <Form>\n  //             <InputS\n  //               type=\"search\"\n  //               name=\"search\"\n  //               placeholder=\"Which city are you looking for?\"\n  //               value={search}\n  //               onChange={(e) => setSearch(e.target.value)}\n  //             />\n  //           </Form>\n  //           {center.lat && (\n  //             <GoogleMap\n  //               center={center}\n  //               mapContainerStyle={containerStyle}\n  //               zoom={zoom}\n  //             >\n  //               <MarkerClusterer options={mapOptions} averageCenter={true}>\n  //                 {(clusterer) =>\n  //                   locations.map(({ node }) => (\n  //                     <MarkerS\n  //                       key={node.id}\n  //                       position={node}\n  //                       clusterer={clusterer}\n  //                       title={node.name}\n  //                       active={activeLocation === node.id}\n  //                       onClick={() => HandleSetup(node, node.id)}\n  //                     />\n  //                   ))\n  //                 }\n  //               </MarkerClusterer>\n  //               {(activeLocation && locations) &&\n  //                 locations.map(({ node }) => {\n  //                   return (\n  //                     node.id === activeLocation && (\n  //                       <InfoWindow\n  //                         onCloseClick={() => setActiveLocation(undefined)}\n  //                         position={{ lat: node.lat, lng: node.lng }}\n  //                         key={node.id}\n  //                       >\n  //                         <>\n  //                           <h5>{node.dealer}</h5>\n  //                           <InRow>\n  //                             <h6>Address:</h6>\n  //                             <span>\n  //                               {node.address} {node.postal} {node.city}{\" \"}\n  //                               {node.province}\n  //                             </span>\n  //                           </InRow>\n  //                         </>\n  //                       </InfoWindow>\n  //                     )\n  //                   );\n  //                 })}\n  //             </GoogleMap>\n  //           )}\n  //         </Fixed>\n  //       </Right>\n  //     </Container>\n  //     </AnimatePresence>\n  //   );\n}; // const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\n\nconst LoadingS = motion.custom(styled(Loading).withConfig({\n  displayName: \"dealerfinder__LoadingS\",\n  componentId: \"sc-1ixs21k-0\"\n})([\"\"]));\nconst Left = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Left\",\n  componentId: \"sc-1ixs21k-1\"\n})([\"display:grid;grid-row:2;@media (min-width:768px){grid-row:1;}\"]);\nconst Right = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Right\",\n  componentId: \"sc-1ixs21k-2\"\n})([\"display:grid;@media (min-width:768px){position:relative;}\"]);\nconst H2 = styled.h2.withConfig({\n  displayName: \"dealerfinder__H2\",\n  componentId: \"sc-1ixs21k-3\"\n})([\"font-size:0.875rem;font-weight:400;max-width:450px;\"]);\nconst Fixed = styled.div.withConfig({\n  displayName: \"dealerfinder__Fixed\",\n  componentId: \"sc-1ixs21k-4\"\n})([\"display:grid;grid-gap:2vh;@media (min-width:768px){position:fixed;width:52.5vw;}\"]);\nconst InputS = styled.input.withConfig({\n  displayName: \"dealerfinder__InputS\",\n  componentId: \"sc-1ixs21k-5\"\n})([\"max-width:450px;\"]);\nconst Content = styled.ul.withConfig({\n  displayName: \"dealerfinder__Content\",\n  componentId: \"sc-1ixs21k-6\"\n})([\"list-style:none;padding-inline-start:0px;display:grid;grid-gap:1.5em;h4{margin:16px 0 0;}\"]);\nconst Dealer = styled.div.withConfig({\n  displayName: \"dealerfinder__Dealer\",\n  componentId: \"sc-1ixs21k-7\"\n})([\"display:grid;grid-gap:0.5em;h6{margin:0;}\"]);\nconst MarkerS = styled(Marker).withConfig({\n  displayName: \"dealerfinder__MarkerS\",\n  componentId: \"sc-1ixs21k-8\"\n})([\"transform:scale(1.1);\"]);\nconst InRow = styled.div.withConfig({\n  displayName: \"dealerfinder__InRow\",\n  componentId: \"sc-1ixs21k-9\"\n})([\"display:grid;grid-auto-flow:column;justify-content:start;align-items:baseline;grid-gap:1em;\"]);\nconst City = styled.div.withConfig({\n  displayName: \"dealerfinder__City\",\n  componentId: \"sc-1ixs21k-10\"\n})([\"h4{grid-column:1/-1;}display:grid;grid-gap:1em;\"]);\nconst Form = styled.form.withConfig({\n  displayName: \"dealerfinder__Form\",\n  componentId: \"sc-1ixs21k-11\"\n})([\"display:grid;\"]);\nexport default DealerFinder;","map":{"version":3,"sources":["/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx"],"names":["React","useState","useEffect","styled","gql","useQuery","motion","Marker","Loading","Container","DEALER_QUERY","DealerFinder","props","data","loading","error","refetch","locations","setLocations","console","log","handleRefetch","variable","search","LoadingS","custom","Left","div","Right","H2","h2","Fixed","InputS","input","Content","ul","Dealer","MarkerS","InRow","City","Form","form"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,SAASC,MAAT,QAAwC,eAAxC;AAEA,SAIEC,MAJF,QAMO,mBANP;AAOA,OAAOC,OAAP,MAAoB,iCAApB;AACA,SAASC,SAAT,QAA0B,mCAA1B;AAEA,MAAMC,YAAY,GAAGN,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;;AAgBA,MAAMO,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAoCX,QAAQ,CAACK,YAAD,CAAlD;AACA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BjB,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,YAAY,CAACL,IAAD,CAAZ;AAED,GAHQ,EAGN,CAACA,IAAD,CAHM,CAAT;AAKA,MAAIC,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAM,EAAvB;AAEXI,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;;AAIA,QAAMI,aAAa,GAAG,MAAM;AAC1BL,IAAAA,OAAO,CAAC;AAACM,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AAAX,KAAD,CAAP;AACD,GAFD;;AAIA,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA,2BACA;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEF,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF,CApB8B,CA8BhlRD,C,CAoRA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,QAAQ,GAAGlB,MAAM,CAACmB,MAAP,CAActB,MAAM,CAACK,OAAD,CAApB;AAAA;AAAA;AAAA,SAAjB;AAGA,MAAMkB,IAAI,GAAGvB,MAAM,CAACG,MAAM,CAACqB,GAAR,CAAT;AAAA;AAAA;AAAA,qEAAV;AAQA,MAAMC,KAAK,GAAGzB,MAAM,CAACG,MAAM,CAACqB,GAAR,CAAT;AAAA;AAAA;AAAA,iEAAX;AAOA,MAAME,EAAE,GAAG1B,MAAM,CAAC2B,EAAV;AAAA;AAAA;AAAA,2DAAR;AAMA,MAAMC,KAAK,GAAG5B,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,wFAAX;AASA,MAAMK,MAAM,GAAG7B,MAAM,CAAC8B,KAAV;AAAA;AAAA;AAAA,wBAAZ;AAIA,MAAMC,OAAO,GAAG/B,MAAM,CAACgC,EAAV;AAAA;AAAA;AAAA,iGAAb;AAUA,MAAMC,MAAM,GAAGjC,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,iDAAZ;AAQA,MAAMU,OAAO,GAAGlC,MAAM,CAACI,MAAD,CAAT;AAAA;AAAA;AAAA,6BAAb;AAIA,MAAM+B,KAAK,GAAGnC,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,mGAAX;AAQA,MAAMY,IAAI,GAAGpC,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,uDAAV;AAQA,MAAMa,IAAI,GAAGrC,MAAM,CAACsC,IAAV;AAAA;AAAA;AAAA,qBAAV;AAIA,eAAe9B,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nimport {\n  GoogleMap,\n  // useLoadScript,\n  // MarkerClusterer,\n  Marker,\n  InfoWindow,\n} from \"react-google-maps\";\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\n\nconst DEALER_QUERY = gql`\n  query DEALER_QUERY($search: String) {\n    allDealers(where: { city_contains: $search }) {\n      postal\n      city\n      venue{\n        formattedAddress\n        googlePlaceID\n        lat\n        lng\n      }\n    }\n  }\n  \n`;\n\nconst DealerFinder = (props) => {\n  const { data, loading, error, refetch } = useQuery(DEALER_QUERY);\n  const [locations, setLocations] = useState([])\n\n  useEffect(() => {\n    setLocations(data)\n  \n  }, [data])\n\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n\n  console.log(locations);\n\n\n\n  const handleRefetch = () => {\n    refetch({variable: { search: \"Tor\" }})\n  }\n\n  return(\n    <Container space>\n    <div>\n      <h1>test</h1>\n      <button onClick={handleRefetch }>Button</button>\n    </div>\n    </Container>\n  )\n  \n\n//   const [locations, setLocations] = useState(data);\n//   const [categories, setCategories] = useState(undefined);\n//   const [center, setCenter] = useState({});\n//   const [activeLocation, setActiveLocation] = useState(undefined);\n//   const [search, setSearch] = useState(\"\");\n//   const [zoom, setZoom] = useState(10);\n\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       if (position) {\n//         setCenter({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       } else {\n//         setCenter({\n//           lat: 43.6539697,\n//           lng: -79.4338794,\n//         });\n//       }\n//     });\n//   }, []);\n\n//   useEffect(() => {\n//     if (!loading) {\n//       setLocations(data.allDealers);\n\n//       setCategories(\n//         data?.dealersConnection?.edges\n//           .map(({ node }) => node.city)\n//           .filter((value, index, self) => self.indexOf(value) === index)\n//           .sort()\n//       );\n//     }\n//   }, [data]);\n\n//   const containerStyle = {\n//     width: \"100%\",\n//     height: \"90vh\",\n//     maxHeight: \"50vh\",\n//   };\n\n//   const mapOptions = {\n//     imagePath:\n//       \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n//   };\n\n//   const HandleSetup = (loc, index) => {\n//     // setInfo({ ...loc, index });\n//     setActiveLocation(index);\n//     setCenter({ lat: loc.lat, lng: loc.lng });\n//     setZoom(16);\n//   };\n\n//   useEffect(() => {\n//     fetchMore({\n//       query: DEALER_QUERY,\n//       variables: {\n//         search,\n//       },\n//       updateQuery: (previousResult, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) {\n//           return previousResult;\n//         }\n\n//         console.log(previousResult, fetchMoreResult);\n\n//         setCategories(\n//           fetchMoreResult.dealersConnection.edges\n//             .map(({ node }) => node.city)\n//             .filter((value, index, self) => self.indexOf(value) === index)\n//             .sort()\n//         );\n//         setLocations(fetchMoreResult.dealersConnection.edges);\n//       },\n//     });\n//   }, [search]);\n\n//   const dealer = (loc) => (\n//     <>\n//       <h5>{loc.dealer}</h5>\n//       <InRow>\n//         <h6>Address:</h6>{\" \"}\n//         <span>\n//           {loc.address} {loc.postal} {loc.city} {loc.province}\n//         </span>\n//       </InRow>\n\n//       {/* <InRow>\n//   //       <h6>Contact Person:</h6> <span>{loc.person}</span>\n//   //     </InRow>\n//   //     <InRow>\n//   //       <h6>Email:</h6>{\" \"}\n//   //       <a href={`mailto:${loc.email}`}>\n//   //         <span>{loc.email}</span>\n//   //       </a>\n//   //     </InRow>\n//   //     {loc.phone && (\n//   //       <InRow>\n//   //         <h6>Phone:</h6>{\" \"}\n//   //         <a href={`tel:${loc.phone}`}>\n//   //           <span>{loc.phone}</span>\n//   //         </a>\n//   //       </InRow>\n//   //     )} */}\n//     </>\n//   );\n\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.REACT_APP_MAP_API_KEY,\n//     libraries: [\"places\"], // ,\n//     // ...otherOptions\n//   });\n\n//   const opacity = {\n//     initial: { x: -10, opacity: 0 },\n//     animate: { x: 0, opacity: 1 },\n//     exit: { x: 10, opacity: 0 },\n//   };\n\n//   if (!center.lat || categories === undefined || !isLoaded) {\n//     return <AnimatePresence exitBeforeEnter><LoadingS initial=\"initial\"\n//     animate=\"animate\"\n//     exit=\"exit\"\n//     variants={opacity} /></AnimatePresence>;\n//   }\n\n//   console.log(locations);\n  \n  \n//   return (\n//     <AnimatePresence exitBeforeEnter>\n      \n//     <Container>\n//       <Left  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Content>\n//           {categories !== undefined && categories.length > 0 ? (\n//             categories.map((item, index) => {\n//               return (\n//                 <City key={index}>\n//                   <h4>{item}</h4>\n//                   {locations.map(({ node }) => {\n//                     if (node.city === item) {\n//                       return (\n//                         <Dealer\n//                           key={node.id}\n//                           active={activeLocation === node.id}\n//                           onClick={() => {\n//                             setCenter({\n//                               lat: node.lat,\n//                               lng: node.lng,\n//                             });\n//                             HandleSetup(node, node.id);\n//                             window.scrollTo(0, 0);\n//                           }}\n//                         >\n//                           {dealer(node)}\n//                         </Dealer>\n//                       );\n//                     }\n//                   })}\n//                 </City>\n//               );\n//             })\n//           ) : (\n//             <h3>There is no city with those letters</h3>\n//           )}\n//         </Content>\n//       </Left>\n//       <Right  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Fixed>\n//           <H2>\n//             Ostaco Windows and Doors products are proudly distributed by many\n//             retailers across Ontario. Please fill out this form and our team\n//             will quickly get back to you with information on your nearest\n//             dealer.\n//           </H2>\n//           <Form>\n//             <InputS\n//               type=\"search\"\n//               name=\"search\"\n//               placeholder=\"Which city are you looking for?\"\n//               value={search}\n//               onChange={(e) => setSearch(e.target.value)}\n//             />\n//           </Form>\n//           {center.lat && (\n//             <GoogleMap\n//               center={center}\n//               mapContainerStyle={containerStyle}\n//               zoom={zoom}\n//             >\n//               <MarkerClusterer options={mapOptions} averageCenter={true}>\n//                 {(clusterer) =>\n//                   locations.map(({ node }) => (\n//                     <MarkerS\n//                       key={node.id}\n//                       position={node}\n//                       clusterer={clusterer}\n//                       title={node.name}\n//                       active={activeLocation === node.id}\n//                       onClick={() => HandleSetup(node, node.id)}\n//                     />\n//                   ))\n//                 }\n//               </MarkerClusterer>\n\n//               {(activeLocation && locations) &&\n//                 locations.map(({ node }) => {\n//                   return (\n//                     node.id === activeLocation && (\n//                       <InfoWindow\n//                         onCloseClick={() => setActiveLocation(undefined)}\n//                         position={{ lat: node.lat, lng: node.lng }}\n//                         key={node.id}\n//                       >\n//                         <>\n//                           <h5>{node.dealer}</h5>\n\n//                           <InRow>\n//                             <h6>Address:</h6>\n//                             <span>\n//                               {node.address} {node.postal} {node.city}{\" \"}\n//                               {node.province}\n//                             </span>\n//                           </InRow>\n//                         </>\n//                       </InfoWindow>\n//                     )\n//                   );\n//                 })}\n//             </GoogleMap>\n//           )}\n//         </Fixed>\n//       </Right>\n//     </Container>\n//     </AnimatePresence>\n//   );\n};\n\n// const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\nconst LoadingS = motion.custom(styled(Loading)``)\n\n\nconst Left = styled(motion.div)`\n  display: grid;\n  grid-row: 2;\n  @media (min-width: 768px) {\n    grid-row: 1;\n  }\n`;\n\nconst Right = styled(motion.div)`\n  display: grid;\n  @media (min-width: 768px) {\n    position: relative;\n  }\n`;\n\nconst H2 = styled.h2`\n  font-size: 0.875rem;\n  font-weight: 400;\n  max-width: 450px;\n`;\n\nconst Fixed = styled.div`\n  display: grid;\n  grid-gap: 2vh;\n  @media (min-width: 768px) {\n    position: fixed;\n    width: 52.5vw;\n  }\n`;\n\nconst InputS = styled.input`\n  max-width: 450px;\n`;\n\nconst Content = styled.ul`\n  list-style: none;\n  padding-inline-start: 0px;\n  display: grid;\n  grid-gap: 1.5em;\n  h4 {\n    margin: 16px 0 0;\n  }\n`;\n\nconst Dealer = styled.div`\n  display: grid;\n  grid-gap: 0.5em;\n  h6 {\n    margin: 0;\n  }\n`;\n\nconst MarkerS = styled(Marker)`\n  transform: scale(1.1);\n`;\n\nconst InRow = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  justify-content: start;\n  align-items: baseline;\n  grid-gap: 1em;\n`;\n\nconst City = styled.div`\n  h4 {\n    grid-column: 1/-1;\n  }\n  display: grid;\n  grid-gap: 1em;\n`;\n\nconst Form = styled.form`\n  display: grid;\n`;\n\nexport default DealerFinder;\n"]},"metadata":{},"sourceType":"module"}