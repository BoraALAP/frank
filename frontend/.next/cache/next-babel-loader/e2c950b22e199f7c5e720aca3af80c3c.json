{"ast":null,"code":"import _slicedToArray from \"/Users/artticfox/Desktop/Work/frank/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/artticfox/Desktop/Work/frank/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query DEALER_QUERY($search: String) {\\n    allDealers(where: { city_contains: $search }) {\\n      postal\\n      city\\n      venue{\\n        formattedAddress\\n        googlePlaceID\\n        lat\\n        lng\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { motion } from \"framer-motion\";\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\nvar DEALER_QUERY = gql(_templateObject());\nvar containerStyle = {\n  width: '400px',\n  height: '400px'\n};\nvar center = {\n  lat: -3.745,\n  lng: -38.523\n};\nimport _ from 'lodash';\nimport { compose, withProps, lifecycle } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\n\nvar DealerFinder = function DealerFinder(props) {\n  _s();\n\n  var _useLazyQuery = useLazyQuery(DEALER_QUERY),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getDealer = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      data = _useLazyQuery2$.data,\n      loading = _useLazyQuery2$.loading,\n      error = _useLazyQuery2$.error;\n\n  var _useState = useState([]),\n      locations = _useState[0],\n      setLocations = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      searchWord = _useState2[0],\n      setSearchWord = _useState2[1]; //select Input\n\n\n  var input = document.getElementById('pac-input'); //initilize searchbox\n\n  var searchBox;\n  useEffect(function () {\n    //call db\n    getDealer(); //load searchbox from google\n\n    if (isLoaded) {\n      searchBox = new google.maps.places.SearchBox(input);\n    }\n  }, []);\n  useEffect(function () {\n    //update state with new db after search\n    setLocations(data);\n  }, [searchWord]); // search the word in db\n\n  var handleRefetch = function handleRefetch() {\n    getDealer({\n      variables: {\n        search: searchWord\n      }\n    });\n  }; //load google map and initilize\n\n\n  var _useLoadScript = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API,\n    libraries: [\"places\"]\n  }),\n      isLoaded = _useLoadScript.isLoaded,\n      loadError = _useLoadScript.loadError;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 23\n  }, _this);\n  if (error) return \"Error! \".concat(error);\n\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Map cannot be loaded right now, sorry.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var handleChange = function handleChange(e) {\n    setSearchWord(e.target.value);\n  };\n\n  var onLoad = function onLoad(ref) {\n    return searchBox = ref;\n  };\n\n  var onPlacesChanged = function onPlacesChanged() {\n    var places = searchBox.getPlaces();\n    var bounds = new google.maps.LatLngBounds();\n    console.log(places, bounds);\n  };\n\n  console.log(searchBox);\n  var MapWithASearchBox = compose(withProps({\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 23\n    }, _this),\n    containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }, _this),\n    mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, _this)\n  }), lifecycle({\n    componentWillMount: function componentWillMount() {\n      var _this2 = this;\n\n      var refs = {};\n      this.setState({\n        bounds: null,\n        center: {\n          lat: 41.9,\n          lng: -87.624\n        },\n        markers: [],\n        onMapMounted: function onMapMounted(ref) {\n          refs.map = ref;\n        },\n        onBoundsChanged: function onBoundsChanged() {\n          _this2.setState({\n            bounds: refs.map.getBounds(),\n            center: refs.map.getCenter()\n          });\n        },\n        onSearchBoxMounted: function onSearchBoxMounted(ref) {\n          refs.searchBox = ref;\n        },\n        onPlacesChanged: function onPlacesChanged() {\n          var places = refs.searchBox.getPlaces();\n          var bounds = new google.maps.LatLngBounds();\n          places.forEach(function (place) {\n            if (place.geometry.viewport) {\n              bounds.union(place.geometry.viewport);\n            } else {\n              bounds.extend(place.geometry.location);\n            }\n          });\n          var nextMarkers = places.map(function (place) {\n            return {\n              position: place.geometry.location\n            };\n          });\n\n          var nextCenter = _.get(nextMarkers, '0.position', _this2.state.center);\n\n          _this2.setState({\n            center: nextCenter,\n            markers: nextMarkers\n          }); // refs.map.fitBounds(bounds);\n\n        }\n      });\n    }\n  }), withScriptjs, withGoogleMap)(function (props) {\n    return /*#__PURE__*/_jsxDEV(GoogleMap, {\n      ref: props.onMapMounted,\n      defaultZoom: 15,\n      center: props.center,\n      onBoundsChanged: props.onBoundsChanged,\n      children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n        ref: props.onSearchBoxMounted,\n        bounds: props.bounds,\n        controlPosition: google.maps.ControlPosition.TOP_LEFT,\n        onPlacesChanged: props.onPlacesChanged,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Customized your placeholder\",\n          style: {\n            boxSizing: \"border-box\",\n            border: \"1px solid transparent\",\n            width: \"240px\",\n            height: \"32px\",\n            marginTop: \"27px\",\n            padding: \"0 12px\",\n            borderRadius: \"3px\",\n            boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.3)\",\n            fontSize: \"14px\",\n            outline: \"none\",\n            textOverflow: \"ellipses\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, _this), props.markers.map(function (marker, index) {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: marker.position\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    space: true,\n    padding: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRefetch,\n        children: \"Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(MapWithASearchBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, _this);\n}; // import { GoogleMap, useLoadScript } from '@react-google-maps/api';\n// import { StandaloneSearchBox } from '@react-google-maps/api';\n// const DealerFinder = (props) => {\n//   const [getDealer, { data, loading, error}] = useLazyQuery(DEALER_QUERY)\n//   const [locations, setLocations] = useState([])\n//   const [searchWord, setSearchWord] = useState(\"\")\n//   //select Input\n//   const input = document.getElementById('pac-input');\n//   //initilize searchbox\n//   let searchBox\n//   useEffect(() => {\n//     //call db\n//     getDealer()\n//     //load searchbox from google\n//     if(isLoaded) {\n//       searchBox = new google.maps.places.SearchBox(input); \n//     }\n//   }, [])\n//   useEffect(() => {\n//     //update state with new db after search\n//     setLocations(data)\n//   }, [searchWord])\n//   // search the word in db\n//   const handleRefetch = () => {\n//     getDealer({variables: { search: searchWord }})\n//   }\n//   //load google map and initilize\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API,\n//     libraries:[\"places\"]\n//   })\n//   if (loading) return <Loading />;\n//   if (error) return `Error! ${error}`;\n//   if (loadError) {\n//     return <div>Map cannot be loaded right now, sorry.</div>\n//   }\n//   const handleChange = (e) => {\n//     setSearchWord(e.target.value)\n//   }\n//   const onLoad = ref => searchBox = ref;\n//   const onPlacesChanged = () => {\n//     const places = searchBox.getPlaces();\n//     const bounds = new google.maps.LatLngBounds();\n//     console.log(places, bounds);\n//   }\n//   console.log(searchBox);\n//   return(\n//     <Container space padding>\n//       <div>\n//         <h1>test</h1>\n//         <button onClick={handleRefetch }>Button</button>\n//         {isLoaded ? (\n//           <><p>test</p>\n//               <GoogleMap\n//               // options={options}\n//               // onLoad={onLoad}\n//               mapContainerStyle={containerStyle}\n//           center={center}\n//           zoom={10}\n//             >\n//              <StandaloneSearchBox\n//              onLoad={onLoad}\n//              onPlacesChanged={\n//                onPlacesChanged\n//              }>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Customized your placeholder\"\n//         id=\"pac-input\"\n//         style={{\n//           boxSizing: `border-box`,\n//           border: `1px solid transparent`,\n//           width: `240px`,\n//           height: `32px`,\n//           padding: `0 12px`,\n//           borderRadius: `3px`,\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n//           fontSize: `14px`,\n//           outline: `none`,\n//           textOverflow: `ellipses`,\n//           position: \"absolute\",\n//           left: \"50%\",\n//           marginLeft: \"-120px\"\n//         }}\n//         onChange={handleChange}\n//         value={searchWord}\n//       />\n//     </StandaloneSearchBox>\n//             </GoogleMap></>\n//          ) : <Loading /> }\n//       </div>\n//     </Container>\n//   )\n// }\n//   const [locations, setLocations] = useState(data);\n//   const [categories, setCategories] = useState(undefined);\n//   const [center, setCenter] = useState({});\n//   const [activeLocation, setActiveLocation] = useState(undefined);\n//   const [search, setSearch] = useState(\"\");\n//   const [zoom, setZoom] = useState(10);\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       if (position) {\n//         setCenter({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       } else {\n//         setCenter({\n//           lat: 43.6539697,\n//           lng: -79.4338794,\n//         });\n//       }\n//     });\n//   }, []);\n//   useEffect(() => {\n//     if (!loading) {\n//       setLocations(data.allDealers);\n//       setCategories(\n//         data?.dealersConnection?.edges\n//           .map(({ node }) => node.city)\n//           .filter((value, index, self) => self.indexOf(value) === index)\n//           .sort()\n//       );\n//     }\n//   }, [data]);\n//   const containerStyle = {\n//     width: \"100%\",\n//     height: \"90vh\",\n//     maxHeight: \"50vh\",\n//   };\n//   const mapOptions = {\n//     imagePath:\n//       \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n//   };\n//   const HandleSetup = (loc, index) => {\n//     // setInfo({ ...loc, index });\n//     setActiveLocation(index);\n//     setCenter({ lat: loc.lat, lng: loc.lng });\n//     setZoom(16);\n//   };\n//   useEffect(() => {\n//     fetchMore({\n//       query: DEALER_QUERY,\n//       variables: {\n//         search,\n//       },\n//       updateQuery: (previousResult, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) {\n//           return previousResult;\n//         }\n//         console.log(previousResult, fetchMoreResult);\n//         setCategories(\n//           fetchMoreResult.dealersConnection.edges\n//             .map(({ node }) => node.city)\n//             .filter((value, index, self) => self.indexOf(value) === index)\n//             .sort()\n//         );\n//         setLocations(fetchMoreResult.dealersConnection.edges);\n//       },\n//     });\n//   }, [search]);\n//   const dealer = (loc) => (\n//     <>\n//       <h5>{loc.dealer}</h5>\n//       <InRow>\n//         <h6>Address:</h6>{\" \"}\n//         <span>\n//           {loc.address} {loc.postal} {loc.city} {loc.province}\n//         </span>\n//       </InRow>\n//       {/* <InRow>\n//   //       <h6>Contact Person:</h6> <span>{loc.person}</span>\n//   //     </InRow>\n//   //     <InRow>\n//   //       <h6>Email:</h6>{\" \"}\n//   //       <a href={`mailto:${loc.email}`}>\n//   //         <span>{loc.email}</span>\n//   //       </a>\n//   //     </InRow>\n//   //     {loc.phone && (\n//   //       <InRow>\n//   //         <h6>Phone:</h6>{\" \"}\n//   //         <a href={`tel:${loc.phone}`}>\n//   //           <span>{loc.phone}</span>\n//   //         </a>\n//   //       </InRow>\n//   //     )} */}\n//     </>\n//   );\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.REACT_APP_MAP_API_KEY,\n//     libraries: [\"places\"], // ,\n//     // ...otherOptions\n//   });\n//   const opacity = {\n//     initial: { x: -10, opacity: 0 },\n//     animate: { x: 0, opacity: 1 },\n//     exit: { x: 10, opacity: 0 },\n//   };\n//   if (!center.lat || categories === undefined || !isLoaded) {\n//     return <AnimatePresence exitBeforeEnter><LoadingS initial=\"initial\"\n//     animate=\"animate\"\n//     exit=\"exit\"\n//     variants={opacity} /></AnimatePresence>;\n//   }\n//   console.log(locations);\n//   return (\n//     <AnimatePresence exitBeforeEnter>\n//     <Container>\n//       <Left  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Content>\n//           {categories !== undefined && categories.length > 0 ? (\n//             categories.map((item, index) => {\n//               return (\n//                 <City key={index}>\n//                   <h4>{item}</h4>\n//                   {locations.map(({ node }) => {\n//                     if (node.city === item) {\n//                       return (\n//                         <Dealer\n//                           key={node.id}\n//                           active={activeLocation === node.id}\n//                           onClick={() => {\n//                             setCenter({\n//                               lat: node.lat,\n//                               lng: node.lng,\n//                             });\n//                             HandleSetup(node, node.id);\n//                             window.scrollTo(0, 0);\n//                           }}\n//                         >\n//                           {dealer(node)}\n//                         </Dealer>\n//                       );\n//                     }\n//                   })}\n//                 </City>\n//               );\n//             })\n//           ) : (\n//             <h3>There is no city with those letters</h3>\n//           )}\n//         </Content>\n//       </Left>\n//       <Right  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Fixed>\n//           <H2>\n//             Ostaco Windows and Doors products are proudly distributed by many\n//             retailers across Ontario. Please fill out this form and our team\n//             will quickly get back to you with information on your nearest\n//             dealer.\n//           </H2>\n//           <Form>\n//             <InputS\n//               type=\"search\"\n//               name=\"search\"\n//               placeholder=\"Which city are you looking for?\"\n//               value={search}\n//               onChange={(e) => setSearch(e.target.value)}\n//             />\n//           </Form>\n//           {center.lat && (\n//             <GoogleMap\n//               center={center}\n//               mapContainerStyle={containerStyle}\n//               zoom={zoom}\n//             >\n//               <MarkerClusterer options={mapOptions} averageCenter={true}>\n//                 {(clusterer) =>\n//                   locations.map(({ node }) => (\n//                     <MarkerS\n//                       key={node.id}\n//                       position={node}\n//                       clusterer={clusterer}\n//                       title={node.name}\n//                       active={activeLocation === node.id}\n//                       onClick={() => HandleSetup(node, node.id)}\n//                     />\n//                   ))\n//                 }\n//               </MarkerClusterer>\n//               {(activeLocation && locations) &&\n//                 locations.map(({ node }) => {\n//                   return (\n//                     node.id === activeLocation && (\n//                       <InfoWindow\n//                         onCloseClick={() => setActiveLocation(undefined)}\n//                         position={{ lat: node.lat, lng: node.lng }}\n//                         key={node.id}\n//                       >\n//                         <>\n//                           <h5>{node.dealer}</h5>\n//                           <InRow>\n//                             <h6>Address:</h6>\n//                             <span>\n//                               {node.address} {node.postal} {node.city}{\" \"}\n//                               {node.province}\n//                             </span>\n//                           </InRow>\n//                         </>\n//                       </InfoWindow>\n//                     )\n//                   );\n//                 })}\n//             </GoogleMap>\n//           )}\n//         </Fixed>\n//       </Right>\n//     </Container>\n//     </AnimatePresence>\n//   );\n// const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\n\n_s(DealerFinder, \"w4nSY3MazK4EuSlAl8jto0sB9Cg=\", true, function () {\n  return [useLazyQuery];\n});\n\n_c = DealerFinder;\nvar LoadingS = motion.custom(styled(Loading).withConfig({\n  displayName: \"dealerfinder__LoadingS\",\n  componentId: \"sc-1ixs21k-0\"\n})([\"\"]));\nvar Left = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Left\",\n  componentId: \"sc-1ixs21k-1\"\n})([\"display:grid;grid-row:2;@media (min-width:768px){grid-row:1;}\"]);\nvar Right = styled(motion.div).withConfig({\n  displayName: \"dealerfinder__Right\",\n  componentId: \"sc-1ixs21k-2\"\n})([\"display:grid;@media (min-width:768px){position:relative;}\"]);\nvar H2 = styled.h2.withConfig({\n  displayName: \"dealerfinder__H2\",\n  componentId: \"sc-1ixs21k-3\"\n})([\"font-size:0.875rem;font-weight:400;max-width:450px;\"]);\nvar Fixed = styled.div.withConfig({\n  displayName: \"dealerfinder__Fixed\",\n  componentId: \"sc-1ixs21k-4\"\n})([\"display:grid;grid-gap:2vh;@media (min-width:768px){position:fixed;width:52.5vw;}\"]);\nvar InputS = styled.input.withConfig({\n  displayName: \"dealerfinder__InputS\",\n  componentId: \"sc-1ixs21k-5\"\n})([\"max-width:450px;\"]);\nvar Content = styled.ul.withConfig({\n  displayName: \"dealerfinder__Content\",\n  componentId: \"sc-1ixs21k-6\"\n})([\"list-style:none;padding-inline-start:0px;display:grid;grid-gap:1.5em;h4{margin:16px 0 0;}\"]);\nvar Dealer = styled.div.withConfig({\n  displayName: \"dealerfinder__Dealer\",\n  componentId: \"sc-1ixs21k-7\"\n})([\"display:grid;grid-gap:0.5em;h6{margin:0;}\"]); // const MarkerS = styled(Marker)`\n//   transform: scale(1.1);\n// `;\n\nvar InRow = styled.div.withConfig({\n  displayName: \"dealerfinder__InRow\",\n  componentId: \"sc-1ixs21k-8\"\n})([\"display:grid;grid-auto-flow:column;justify-content:start;align-items:baseline;grid-gap:1em;\"]);\nvar City = styled.div.withConfig({\n  displayName: \"dealerfinder__City\",\n  componentId: \"sc-1ixs21k-9\"\n})([\"h4{grid-column:1/-1;}display:grid;grid-gap:1em;\"]);\nvar Form = styled.form.withConfig({\n  displayName: \"dealerfinder__Form\",\n  componentId: \"sc-1ixs21k-10\"\n})([\"display:grid;\"]);\nexport default DealerFinder;\n\nvar _c;\n\n$RefreshReg$(_c, \"DealerFinder\");","map":{"version":3,"sources":["/Users/artticfox/Desktop/Work/frank/frontend/pages/sub/dealerfinder.tsx"],"names":["useState","useEffect","styled","gql","useLazyQuery","motion","Loading","Container","DEALER_QUERY","containerStyle","width","height","center","lat","lng","_","compose","withProps","lifecycle","withScriptjs","withGoogleMap","GoogleMap","Marker","SearchBox","DealerFinder","props","getDealer","data","loading","error","locations","setLocations","searchWord","setSearchWord","input","document","getElementById","searchBox","isLoaded","google","maps","places","handleRefetch","variables","search","useLoadScript","googleMapsApiKey","process","env","NEXT_PUBLIC_GOOGLE_MAP_API","libraries","loadError","handleChange","e","target","value","onLoad","ref","onPlacesChanged","getPlaces","bounds","LatLngBounds","console","log","MapWithASearchBox","googleMapURL","loadingElement","containerElement","mapElement","componentWillMount","refs","setState","markers","onMapMounted","map","onBoundsChanged","getBounds","getCenter","onSearchBoxMounted","forEach","place","geometry","viewport","union","extend","location","nextMarkers","position","nextCenter","get","state","ControlPosition","TOP_LEFT","boxSizing","border","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","marker","index","LoadingS","custom","Left","div","Right","H2","h2","Fixed","InputS","Content","ul","Dealer","InRow","City","Form","form"],"mappings":"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;AASLC,YAAAA,QAAQ,QATH;AAULC,YAAAA,OAAO,QAVF;AAWLC,YAAAA,YAAY;AAXP;AAHT;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eANF,EA8BG5E,KAAK,CAAC+C,OAAN,CAAcE,GAAd,CAAkB,UAAC4B,MAAD,EAASC,KAAT;AAAA,4BACjB,QAAC,MAAD;AAAoB,UAAA,QAAQ,EAAED,MAAM,CAACf;AAArC,WAAagB,KAAb;AAAA;AAAA;AAAA;AAAA,iBADiB;AAAA,OAAlB,CA9BH;AAAA;AAAA;AAAA;AAAA;AAAA,aADK;AAAA,GAxDmB,CAA1B;AA8FA,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,OAAO,MAAxB;AAAA,2BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAQ,QAAA,OAAO,EAAE7D,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,eAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AASD,CA7JD,C,CA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;GArgBMlB,Y;UACyCpB,Y;;;KADzCoB,Y;AAugBN,IAAMgF,QAAQ,GAAGnG,MAAM,CAACoG,MAAP,CAAcvG,MAAM,CAACI,OAAD,CAApB;AAAA;AAAA;AAAA,SAAjB;AAGA,IAAMoG,IAAI,GAAGxG,MAAM,CAACG,MAAM,CAACsG,GAAR,CAAT;AAAA;AAAA;AAAA,qEAAV;AAQA,IAAMC,KAAK,GAAG1G,MAAM,CAACG,MAAM,CAACsG,GAAR,CAAT;AAAA;AAAA;AAAA,iEAAX;AAOA,IAAME,EAAE,GAAG3G,MAAM,CAAC4G,EAAV;AAAA;AAAA;AAAA,2DAAR;AAMA,IAAMC,KAAK,GAAG7G,MAAM,CAACyG,GAAV;AAAA;AAAA;AAAA,wFAAX;AASA,IAAMK,MAAM,GAAG9G,MAAM,CAACgC,KAAV;AAAA;AAAA;AAAA,wBAAZ;AAIA,IAAM+E,OAAO,GAAG/G,MAAM,CAACgH,EAAV;AAAA;AAAA;AAAA,iGAAb;AAUA,IAAMC,MAAM,GAAGjH,MAAM,CAACyG,GAAV;AAAA;AAAA;AAAA,iDAAZ,C,CAQA;AACA;AACA;;AAEA,IAAMS,KAAK,GAAGlH,MAAM,CAACyG,GAAV;AAAA;AAAA;AAAA,mGAAX;AAQA,IAAMU,IAAI,GAAGnH,MAAM,CAACyG,GAAV;AAAA;AAAA;AAAA,uDAAV;AAQA,IAAMW,IAAI,GAAGpH,MAAM,CAACqH,IAAV;AAAA;AAAA;AAAA,qBAAV;AAIA,eAAe/F,YAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n\nimport Loading from \"../../components/global/Loading\";\nimport { Container } from \"../../components/layout/Container\";\n\nconst DEALER_QUERY = gql`\n  query DEALER_QUERY($search: String) {\n    allDealers(where: { city_contains: $search }) {\n      postal\n      city\n      venue{\n        formattedAddress\n        googlePlaceID\n        lat\n        lng\n      }\n    }\n  }\n`;\n\nconst containerStyle = {\n  width: '400px',\n  height: '400px'\n};\n\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nimport _ from 'lodash';\nimport { compose, withProps, lifecycle } from\"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from\"react-google-maps\";\nimport SearchBox from\"react-google-maps/lib/components/places/SearchBox\";\n\nconst DealerFinder = (props) => {\n  const [getDealer, { data, loading, error}] = useLazyQuery(DEALER_QUERY)\n  const [locations, setLocations] = useState([])\n  const [searchWord, setSearchWord] = useState(\"\")\n  //select Input\n  const input = document.getElementById('pac-input');\n  //initilize searchbox\n  let searchBox\n\n  useEffect(() => {\n    //call db\n    getDealer()\n    //load searchbox from google\n    if(isLoaded) {\n      searchBox = new google.maps.places.SearchBox(input); \n    }\n  }, [])\n\n  useEffect(() => {\n    //update state with new db after search\n    setLocations(data)\n  }, [searchWord])\n\n  // search the word in db\n  const handleRefetch = () => {\n    getDealer({variables: { search: searchWord }})\n  }\n\n  //load google map and initilize\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API,\n    libraries:[\"places\"]\n  })\n\n  if (loading) return <Loading />;\n  if (error) return `Error! ${error}`;\n    \n  if (loadError) {\n    return <div>Map cannot be loaded right now, sorry.</div>\n  }\n\n  const handleChange = (e) => {\n    setSearchWord(e.target.value)\n  }\n\n  const onLoad = ref => searchBox = ref;\n  const onPlacesChanged = () => {\n    const places = searchBox.getPlaces();\n    const bounds = new google.maps.LatLngBounds();\n    console.log(places, bounds);\n  }\n\n  console.log(searchBox);\n\n  const MapWithASearchBox = compose(\n    withProps({\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: <div style={{ height: `100%` }} />,\n      containerElement: <div style={{ height: `400px` }} />,\n      mapElement: <div style={{ height: `100%` }} />,\n    }),\n    lifecycle({\n      componentWillMount() {\n        const refs = {}\n  \n        this.setState({\n          bounds: null,\n          center: {\n            lat: 41.9, lng: -87.624\n          },\n          markers: [],\n          onMapMounted: ref => {\n            refs.map = ref;\n          },\n          onBoundsChanged: () => {\n            this.setState({\n              bounds: refs.map.getBounds(),\n              center: refs.map.getCenter(),\n            })\n          },\n          onSearchBoxMounted: ref => {\n            refs.searchBox = ref;\n          },\n          onPlacesChanged: () => {\n            const places = refs.searchBox.getPlaces();\n            const bounds = new google.maps.LatLngBounds();\n  \n            places.forEach(place => {\n              if (place.geometry.viewport) {\n                bounds.union(place.geometry.viewport)\n              } else {\n                bounds.extend(place.geometry.location)\n              }\n            });\n            const nextMarkers = places.map(place => ({\n              position: place.geometry.location,\n            }));\n            const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n  \n            this.setState({\n              center: nextCenter,\n              markers: nextMarkers,\n            });\n            // refs.map.fitBounds(bounds);\n          },\n        })\n      },\n    }),\n    withScriptjs,\n    withGoogleMap\n  )(props =>\n    <GoogleMap\n      ref={props.onMapMounted}\n      defaultZoom={15}\n      center={props.center}\n      onBoundsChanged={props.onBoundsChanged}\n    >\n      <SearchBox\n        ref={props.onSearchBoxMounted}\n        bounds={props.bounds}\n        controlPosition={google.maps.ControlPosition.TOP_LEFT}\n        onPlacesChanged={props.onPlacesChanged}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Customized your placeholder\"\n          style={{\n            boxSizing: `border-box`,\n            border: `1px solid transparent`,\n            width: `240px`,\n            height: `32px`,\n            marginTop: `27px`,\n            padding: `0 12px`,\n            borderRadius: `3px`,\n            boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n            fontSize: `14px`,\n            outline: `none`,\n            textOverflow: `ellipses`,\n          }}\n        />\n      </SearchBox>\n      {props.markers.map((marker, index) =>\n        <Marker key={index} position={marker.position} />\n      )}\n    </GoogleMap>\n  );\n\n\n  return(\n    <Container space padding>\n      <div>\n        <h1>test</h1>\n        <button onClick={handleRefetch }>Button</button>\n        <MapWithASearchBox />\n      </div>\n    </Container>\n  )\n}\n\n// import { GoogleMap, useLoadScript } from '@react-google-maps/api';\n// import { StandaloneSearchBox } from '@react-google-maps/api';\n// const DealerFinder = (props) => {\n//   const [getDealer, { data, loading, error}] = useLazyQuery(DEALER_QUERY)\n//   const [locations, setLocations] = useState([])\n//   const [searchWord, setSearchWord] = useState(\"\")\n//   //select Input\n//   const input = document.getElementById('pac-input');\n//   //initilize searchbox\n//   let searchBox\n\n//   useEffect(() => {\n//     //call db\n//     getDealer()\n//     //load searchbox from google\n//     if(isLoaded) {\n//       searchBox = new google.maps.places.SearchBox(input); \n//     }\n//   }, [])\n\n//   useEffect(() => {\n//     //update state with new db after search\n//     setLocations(data)\n//   }, [searchWord])\n\n//   // search the word in db\n//   const handleRefetch = () => {\n//     getDealer({variables: { search: searchWord }})\n//   }\n\n//   //load google map and initilize\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAP_API,\n//     libraries:[\"places\"]\n//   })\n\n//   if (loading) return <Loading />;\n//   if (error) return `Error! ${error}`;\n    \n//   if (loadError) {\n//     return <div>Map cannot be loaded right now, sorry.</div>\n//   }\n\n//   const handleChange = (e) => {\n//     setSearchWord(e.target.value)\n//   }\n\n//   const onLoad = ref => searchBox = ref;\n//   const onPlacesChanged = () => {\n//     const places = searchBox.getPlaces();\n//     const bounds = new google.maps.LatLngBounds();\n//     console.log(places, bounds);\n//   }\n\n//   console.log(searchBox);\n\n\n//   return(\n//     <Container space padding>\n//       <div>\n//         <h1>test</h1>\n//         <button onClick={handleRefetch }>Button</button>\n//         {isLoaded ? (\n//           <><p>test</p>\n//               <GoogleMap\n//               // options={options}\n//               // onLoad={onLoad}\n//               mapContainerStyle={containerStyle}\n//           center={center}\n//           zoom={10}\n//             >\n//              <StandaloneSearchBox\n//              onLoad={onLoad}\n//              onPlacesChanged={\n//                onPlacesChanged\n//              }>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Customized your placeholder\"\n//         id=\"pac-input\"\n//         style={{\n//           boxSizing: `border-box`,\n//           border: `1px solid transparent`,\n//           width: `240px`,\n//           height: `32px`,\n//           padding: `0 12px`,\n//           borderRadius: `3px`,\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n//           fontSize: `14px`,\n//           outline: `none`,\n//           textOverflow: `ellipses`,\n//           position: \"absolute\",\n//           left: \"50%\",\n//           marginLeft: \"-120px\"\n//         }}\n//         onChange={handleChange}\n//         value={searchWord}\n      \n//       />\n//     </StandaloneSearchBox>\n//             </GoogleMap></>\n//          ) : <Loading /> }\n//       </div>\n//     </Container>\n//   )\n// }\n\n//   const [locations, setLocations] = useState(data);\n//   const [categories, setCategories] = useState(undefined);\n//   const [center, setCenter] = useState({});\n//   const [activeLocation, setActiveLocation] = useState(undefined);\n//   const [search, setSearch] = useState(\"\");\n//   const [zoom, setZoom] = useState(10);\n\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       if (position) {\n//         setCenter({\n//           lat: position.coords.latitude,\n//           lng: position.coords.longitude,\n//         });\n//       } else {\n//         setCenter({\n//           lat: 43.6539697,\n//           lng: -79.4338794,\n//         });\n//       }\n//     });\n//   }, []);\n\n//   useEffect(() => {\n//     if (!loading) {\n//       setLocations(data.allDealers);\n\n//       setCategories(\n//         data?.dealersConnection?.edges\n//           .map(({ node }) => node.city)\n//           .filter((value, index, self) => self.indexOf(value) === index)\n//           .sort()\n//       );\n//     }\n//   }, [data]);\n\n//   const containerStyle = {\n//     width: \"100%\",\n//     height: \"90vh\",\n//     maxHeight: \"50vh\",\n//   };\n\n//   const mapOptions = {\n//     imagePath:\n//       \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n//   };\n\n//   const HandleSetup = (loc, index) => {\n//     // setInfo({ ...loc, index });\n//     setActiveLocation(index);\n//     setCenter({ lat: loc.lat, lng: loc.lng });\n//     setZoom(16);\n//   };\n\n//   useEffect(() => {\n//     fetchMore({\n//       query: DEALER_QUERY,\n//       variables: {\n//         search,\n//       },\n//       updateQuery: (previousResult, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) {\n//           return previousResult;\n//         }\n\n//         console.log(previousResult, fetchMoreResult);\n\n//         setCategories(\n//           fetchMoreResult.dealersConnection.edges\n//             .map(({ node }) => node.city)\n//             .filter((value, index, self) => self.indexOf(value) === index)\n//             .sort()\n//         );\n//         setLocations(fetchMoreResult.dealersConnection.edges);\n//       },\n//     });\n//   }, [search]);\n\n//   const dealer = (loc) => (\n//     <>\n//       <h5>{loc.dealer}</h5>\n//       <InRow>\n//         <h6>Address:</h6>{\" \"}\n//         <span>\n//           {loc.address} {loc.postal} {loc.city} {loc.province}\n//         </span>\n//       </InRow>\n\n//       {/* <InRow>\n//   //       <h6>Contact Person:</h6> <span>{loc.person}</span>\n//   //     </InRow>\n//   //     <InRow>\n//   //       <h6>Email:</h6>{\" \"}\n//   //       <a href={`mailto:${loc.email}`}>\n//   //         <span>{loc.email}</span>\n//   //       </a>\n//   //     </InRow>\n//   //     {loc.phone && (\n//   //       <InRow>\n//   //         <h6>Phone:</h6>{\" \"}\n//   //         <a href={`tel:${loc.phone}`}>\n//   //           <span>{loc.phone}</span>\n//   //         </a>\n//   //       </InRow>\n//   //     )} */}\n//     </>\n//   );\n\n//   const { isLoaded, loadError } = useLoadScript({\n//     googleMapsApiKey: process.env.REACT_APP_MAP_API_KEY,\n//     libraries: [\"places\"], // ,\n//     // ...otherOptions\n//   });\n\n//   const opacity = {\n//     initial: { x: -10, opacity: 0 },\n//     animate: { x: 0, opacity: 1 },\n//     exit: { x: 10, opacity: 0 },\n//   };\n\n//   if (!center.lat || categories === undefined || !isLoaded) {\n//     return <AnimatePresence exitBeforeEnter><LoadingS initial=\"initial\"\n//     animate=\"animate\"\n//     exit=\"exit\"\n//     variants={opacity} /></AnimatePresence>;\n//   }\n\n//   console.log(locations);\n  \n  \n//   return (\n//     <AnimatePresence exitBeforeEnter>\n      \n//     <Container>\n//       <Left  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Content>\n//           {categories !== undefined && categories.length > 0 ? (\n//             categories.map((item, index) => {\n//               return (\n//                 <City key={index}>\n//                   <h4>{item}</h4>\n//                   {locations.map(({ node }) => {\n//                     if (node.city === item) {\n//                       return (\n//                         <Dealer\n//                           key={node.id}\n//                           active={activeLocation === node.id}\n//                           onClick={() => {\n//                             setCenter({\n//                               lat: node.lat,\n//                               lng: node.lng,\n//                             });\n//                             HandleSetup(node, node.id);\n//                             window.scrollTo(0, 0);\n//                           }}\n//                         >\n//                           {dealer(node)}\n//                         </Dealer>\n//                       );\n//                     }\n//                   })}\n//                 </City>\n//               );\n//             })\n//           ) : (\n//             <h3>There is no city with those letters</h3>\n//           )}\n//         </Content>\n//       </Left>\n//       <Right  initial=\"initial\"\n//             animate=\"animate\"\n//             exit=\"exit\"\n//             variants={opacity}>\n//         <Fixed>\n//           <H2>\n//             Ostaco Windows and Doors products are proudly distributed by many\n//             retailers across Ontario. Please fill out this form and our team\n//             will quickly get back to you with information on your nearest\n//             dealer.\n//           </H2>\n//           <Form>\n//             <InputS\n//               type=\"search\"\n//               name=\"search\"\n//               placeholder=\"Which city are you looking for?\"\n//               value={search}\n//               onChange={(e) => setSearch(e.target.value)}\n//             />\n//           </Form>\n//           {center.lat && (\n//             <GoogleMap\n//               center={center}\n//               mapContainerStyle={containerStyle}\n//               zoom={zoom}\n//             >\n//               <MarkerClusterer options={mapOptions} averageCenter={true}>\n//                 {(clusterer) =>\n//                   locations.map(({ node }) => (\n//                     <MarkerS\n//                       key={node.id}\n//                       position={node}\n//                       clusterer={clusterer}\n//                       title={node.name}\n//                       active={activeLocation === node.id}\n//                       onClick={() => HandleSetup(node, node.id)}\n//                     />\n//                   ))\n//                 }\n//               </MarkerClusterer>\n\n//               {(activeLocation && locations) &&\n//                 locations.map(({ node }) => {\n//                   return (\n//                     node.id === activeLocation && (\n//                       <InfoWindow\n//                         onCloseClick={() => setActiveLocation(undefined)}\n//                         position={{ lat: node.lat, lng: node.lng }}\n//                         key={node.id}\n//                       >\n//                         <>\n//                           <h5>{node.dealer}</h5>\n\n//                           <InRow>\n//                             <h6>Address:</h6>\n//                             <span>\n//                               {node.address} {node.postal} {node.city}{\" \"}\n//                               {node.province}\n//                             </span>\n//                           </InRow>\n//                         </>\n//                       </InfoWindow>\n//                     )\n//                   );\n//                 })}\n//             </GoogleMap>\n//           )}\n//         </Fixed>\n//       </Right>\n//     </Container>\n//     </AnimatePresence>\n//   );\n\n// const Container = styled(motion.div)`\n//   display: grid;\n//   grid-gap: 1.5em;\n//   @media (min-width: 768px) {\n//     grid-template-columns: 2fr 3fr;\n//   }\n// `;\n\nconst LoadingS = motion.custom(styled(Loading)``)\n\n\nconst Left = styled(motion.div)`\n  display: grid;\n  grid-row: 2;\n  @media (min-width: 768px) {\n    grid-row: 1;\n  }\n`;\n\nconst Right = styled(motion.div)`\n  display: grid;\n  @media (min-width: 768px) {\n    position: relative;\n  }\n`;\n\nconst H2 = styled.h2`\n  font-size: 0.875rem;\n  font-weight: 400;\n  max-width: 450px;\n`;\n\nconst Fixed = styled.div`\n  display: grid;\n  grid-gap: 2vh;\n  @media (min-width: 768px) {\n    position: fixed;\n    width: 52.5vw;\n  }\n`;\n\nconst InputS = styled.input`\n  max-width: 450px;\n`;\n\nconst Content = styled.ul`\n  list-style: none;\n  padding-inline-start: 0px;\n  display: grid;\n  grid-gap: 1.5em;\n  h4 {\n    margin: 16px 0 0;\n  }\n`;\n\nconst Dealer = styled.div`\n  display: grid;\n  grid-gap: 0.5em;\n  h6 {\n    margin: 0;\n  }\n`;\n\n// const MarkerS = styled(Marker)`\n//   transform: scale(1.1);\n// `;\n\nconst InRow = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  justify-content: start;\n  align-items: baseline;\n  grid-gap: 1em;\n`;\n\nconst City = styled.div`\n  h4 {\n    grid-column: 1/-1;\n  }\n  display: grid;\n  grid-gap: 1em;\n`;\n\nconst Form = styled.form`\n  display: grid;\n`;\n\nexport default DealerFinder;\n"]},"metadata":{},"sourceType":"module"}